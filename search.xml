<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>css那些事</title>
    <url>/2025/03/28/css%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h2 id="display-inline-block-和-block、inline-的区别"><a href="#display-inline-block-和-block、inline-的区别" class="headerlink" title="display inline-block 和 block、inline 的区别"></a>display inline-block 和 block、inline 的区别</h2><h2 id="display-属性对比表"><a href="#display-属性对比表" class="headerlink" title="display 属性对比表"></a>display 属性对比表</h2><table>
<thead>
<tr>
<th>特性</th>
<th><code>display: block</code></th>
<th><code>display: inline</code></th>
<th><code>display: inline-block</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong>显示方式</strong></td>
<td>独占一行</td>
<td>行内显示</td>
<td>行内显示</td>
</tr>
<tr>
<td><strong>宽高设置</strong></td>
<td>✅ 可设置</td>
<td>❌ 不可设置</td>
<td>✅ 可设置</td>
</tr>
<tr>
<td><strong>边距影响</strong></td>
<td>完全生效</td>
<td>水平方向生效，垂直方向部分生效</td>
<td>完全生效（可能导致布局问题）</td>
</tr>
<tr>
<td><strong>包含元素</strong></td>
<td>块级和行内元素</td>
<td>只能包含行内元素</td>
<td>块级和行内元素</td>
</tr>
<tr>
<td><strong>默认宽度</strong></td>
<td>父容器 100%</td>
<td>由内容决定</td>
<td>由内容决定</td>
</tr>
<tr>
<td><strong>典型元素</strong></td>
<td><code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code></td>
<td><code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code></td>
<td><code>&lt;img&gt;</code>等替换元素</td>
</tr>
<tr>
<td><strong>布局场景</strong></td>
<td>整体布局结构</td>
<td>文本修饰、行内元素</td>
<td>需要控制尺寸的行内元素</td>
</tr>
<tr>
<td><strong>注意事项</strong></td>
<td>-</td>
<td>-</td>
<td>需处理<code>inline-block</code>间隙问题</td>
</tr>
</tbody></table>
<h3 id="间隙问题解决方案"><a href="#间隙问题解决方案" class="headerlink" title="间隙问题解决方案"></a>间隙问题解决方案</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/* 消除间隙 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 重置字体大小 */</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: top; <span class="comment">/* 顶部对齐 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS-盒模型详解"><a href="#CSS-盒模型详解" class="headerlink" title="CSS 盒模型详解"></a>CSS 盒模型详解</h2><p>CSS 盒模型（Box Model）是网页布局的基础，定义了元素在页面中占据的空间。一个盒子由以下四部分组成：</p>
<h3 id="1-内容区（Content）"><a href="#1-内容区（Content）" class="headerlink" title="1. 内容区（Content）"></a>1. 内容区（Content）</h3><ul>
<li>显示文本、图片等实际内容。</li>
<li>大小由 <code>width</code> 和 <code>height</code> 控制。</li>
</ul>
<h3 id="2-内边距（Padding）"><a href="#2-内边距（Padding）" class="headerlink" title="2. 内边距（Padding）"></a>2. 内边距（Padding）</h3><ul>
<li>内容与边框之间的透明区域。</li>
<li>通过 <code>padding-top</code>、<code>padding-right</code> 等属性设置。</li>
</ul>
<h3 id="3-边框（Border）"><a href="#3-边框（Border）" class="headerlink" title="3. 边框（Border）"></a>3. 边框（Border）</h3><ul>
<li>围绕内容和内边距的边界线。</li>
<li>通过 <code>border-width</code>、<code>border-style</code> 等属性设置。</li>
</ul>
<h3 id="4-外边距（Margin）"><a href="#4-外边距（Margin）" class="headerlink" title="4. 外边距（Margin）"></a>4. 外边距（Margin）</h3><ul>
<li>盒子与其他元素之间的透明区域。</li>
<li>通过 <code>margin-top</code>、<code>margin-right</code> 等属性设置。</li>
</ul>
<hr>
<h3 id="标准盒模型-vs-怪异盒模型"><a href="#标准盒模型-vs-怪异盒模型" class="headerlink" title="标准盒模型 vs 怪异盒模型"></a>标准盒模型 vs 怪异盒模型</h3><ul>
<li><p><strong>标准盒模型（<code>box-sizing: content-box</code>）</strong></p>
<ul>
<li><code>width</code> 和 <code>height</code> 仅控制内容区大小。</li>
<li>总宽度 &#x3D; <code>width</code> + <code>padding</code> + <code>border</code> + <code>margin</code>。</li>
</ul>
</li>
<li><p><strong>怪异盒模型（<code>box-sizing: border-box</code>）</strong></p>
<ul>
<li><code>width</code> 和 <code>height</code> 包含内容、内边距和边框。</li>
<li>总宽度 &#x3D; <code>width</code>（含 <code>padding</code> 和 <code>border</code>） + <code>margin</code>。</li>
<li>推荐使用：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h2 id="BFC（块级格式化上下文）详解"><a href="#BFC（块级格式化上下文）详解" class="headerlink" title="BFC（块级格式化上下文）详解"></a>BFC（块级格式化上下文）详解</h2><p>BFC（Block Formatting Context）是 CSS 渲染的一块独立区域，内部元素不会影响外部布局。</p>
<h3 id="触发-BFC-的条件"><a href="#触发-BFC-的条件" class="headerlink" title="触发 BFC 的条件"></a>触发 BFC 的条件</h3><p>以下属性可以触发 BFC：</p>
<ul>
<li><code>float: left/right</code>（不为 <code>none</code>）</li>
<li><code>position: absolute/fixed</code></li>
<li><code>display: inline-block/table-cell/flex</code></li>
<li><code>overflow: hidden/auto/scroll</code>（不为 <code>visible</code>）</li>
</ul>
<hr>
<h3 id="BFC-的特性"><a href="#BFC-的特性" class="headerlink" title="BFC 的特性"></a>BFC 的特性</h3><ol>
<li><strong>阻止外边距重叠（Margin Collapse）</strong></li>
</ol>
<ul>
<li>普通流中相邻垂直外边距会合并（取最大值）。</li>
<li>BFC 内的元素与外部元素不会发生外边距重叠。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bfc&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>包含浮动元素</li>
</ol>
<ul>
<li>父元素未设置高度时，子元素浮动会导致父元素高度塌陷。</li>
<li>触发 BFC 后，父元素会包裹浮动子元素。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125; <span class="comment">/* 触发 BFC */</span></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>阻止元素被浮动覆盖</li>
</ol>
<ul>
<li>BFC 区域不会与浮动元素重叠。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left; width: 100px;&quot;</span>&gt;</span>浮动元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span>BFC 元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="盒模型-BFC-总结"><a href="#盒模型-BFC-总结" class="headerlink" title="盒模型&amp;BFC 总结"></a>盒模型&amp;BFC 总结</h2><table>
<thead>
<tr>
<th>特性</th>
<th>盒模型</th>
<th>BFC</th>
</tr>
</thead>
<tbody><tr>
<td>作用</td>
<td>定义元素空间占用</td>
<td>创建独立布局环境</td>
</tr>
<tr>
<td>核心问题</td>
<td>计算实际宽高</td>
<td>解决外边距重叠、浮动塌陷等问题</td>
</tr>
<tr>
<td>常用属性</td>
<td><code>width</code>, <code>padding</code>, <code>border</code></td>
<td><code>overflow</code>, <code>float</code>, <code>position</code></td>
</tr>
</tbody></table>
<h2 id="CSS-经典布局"><a href="#CSS-经典布局" class="headerlink" title="CSS 经典布局"></a>CSS 经典布局</h2><h3 id="布局选择建议"><a href="#布局选择建议" class="headerlink" title="布局选择建议"></a>布局选择建议</h3><ol>
<li>简单布局 ：优先使用 Flexbox</li>
<li>二维复杂布局 ：使用 CSS Grid</li>
<li>传统布局 ：Float + Clearfix（兼容旧浏览器）</li>
<li>特殊场景 ：<ul>
<li>瀑布流： column-count 或 JS 实现</li>
<li>粘性元素： position: sticky</li>
<li>响应式：配合媒体查询使用</li>
</ul>
</li>
</ol>
<h3 id="1-居中布局-水平-垂直"><a href="#1-居中布局-水平-垂直" class="headerlink" title="1. 居中布局 (水平+垂直)"></a>1. 居中布局 (水平+垂直)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 方法1：Flexbox */</span></span><br><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法2：绝对定位 */</span></span><br><span class="line"><span class="selector-class">.center-absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法3：Grid */</span></span><br><span class="line"><span class="selector-class">.center-grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">place-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-两栏-三栏布局"><a href="#2-两栏-三栏布局" class="headerlink" title="2. 两栏&#x2F;三栏布局"></a>2. 两栏&#x2F;三栏布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 两栏布局（左侧固定，右侧自适应） */</span></span><br><span class="line"><span class="selector-class">.two-columns</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   * flex-shrink属性用于定义项目的缩小比例。</span></span><br><span class="line"><span class="comment">   * 默认值为1，即如果空间不足，项目将等比例缩小。</span></span><br><span class="line"><span class="comment">   * 设置为0表示项目不缩小，保持原始尺寸。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   * flex-grow属性定义了项目的放大比例，默认值为0，即如果存在剩余空间，也不放大。</span></span><br><span class="line"><span class="comment">   * 设置为1表示如果存在剩余空间，该项目将等比例地占据剩余空间。</span></span><br><span class="line"><span class="comment">   * 这个属性用于flex布局中，是flex子项的一个属性。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 三栏布局（圣杯布局） */</span></span><br><span class="line"><span class="selector-class">.three-columns</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-瀑布流布局-css3-语法"><a href="#3-瀑布流布局-css3-语法" class="headerlink" title="3. 瀑布流布局 (css3 语法)"></a>3. 瀑布流布局 (css3 语法)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* 定义列布局 */</span></span><br><span class="line">  <span class="attribute">columns</span>: <span class="number">4</span> <span class="number">200px</span>; // 设置列数为<span class="number">4</span>，每列宽度为<span class="number">200px</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 定义列间距 */</span></span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">1rem</span>; // 设置列与列之间的间距为<span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">/* 设置元素在分页、分栏或分块时避免被中断 */</span></span><br><span class="line">  <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">  <span class="comment">/* 设置元素底部的外边距为1rem */</span></span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-等分布局"><a href="#4-等分布局" class="headerlink" title="4. 等分布局"></a>4. 等分布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Flex 实现 */</span></span><br><span class="line"><span class="selector-class">.equal-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.equal-flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Grid 实现 */</span></span><br><span class="line"><span class="selector-class">.equal-grid</span> &#123;</span><br><span class="line">  <span class="comment">/* 使用CSS Grid布局 */</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 定义网格列的模板 */</span></span><br><span class="line">  <span class="comment">/* repeat(auto-fit, minmax(100px, 1fr)) 的含义是：</span></span><br><span class="line"><span class="comment">     - auto-fit：自动填充列，尽可能多地填充可用空间</span></span><br><span class="line"><span class="comment">     - minmax(100px, 1fr)：每个列的最小宽度为100px，最大宽度为1fr（即剩余空间的等分）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-粘性页脚布局"><a href="#5-粘性页脚布局" class="headerlink" title="5. 粘性页脚布局"></a>5. 粘性页脚布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="comment">/* 使用Flex布局 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 设置主轴方向为垂直方向，即子元素按从上到下的顺序排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-全屏布局"><a href="#6-全屏布局" class="headerlink" title="6. 全屏布局"></a>6. 全屏布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fullscreen</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  // 设置元素的宽度为视口宽度的<span class="number">100%</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  // 设置元素的高度为视口高度的<span class="number">100%</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目中Markdown集成完整指南</title>
    <url>/2025/03/25/react%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%95%E5%85%A5markdown/</url>
    <content><![CDATA[<h2 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a>推荐方案</h2><blockquote>
<p>如果你需要完整的 Markdown 渲染功能，推荐使用 react-markdown + remark-gfm + react-syntax-highlighter 组合。如果需要编辑器功能，可以使用 react-md-editor 。</p>
</blockquote>
<h3 id="1-react-markdown"><a href="#1-react-markdown" class="headerlink" title="1. react-markdown"></a>1. react-markdown</h3><blockquote>
<p>功能: 将 Markdown 转换为 React 组件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-markdown</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span>&gt;</span>&#123;markdown&#125;<span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-remark-gfm"><a href="#2-remark-gfm" class="headerlink" title="2. remark-gfm"></a>2. remark-gfm</h3><blockquote>
<p>功能 : 支持 GitHub Flavored Markdown（GFM）语法</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install remark-gfm</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> remarkGfm <span class="keyword">from</span> <span class="string">&quot;remark-gfm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span> <span class="attr">remarkPlugins</span>=<span class="string">&#123;[remarkGfm]&#125;</span>&gt;</span>&#123;markdown&#125;<span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-react-syntax-highlighter"><a href="#3-react-syntax-highlighter" class="headerlink" title="3. react-syntax-highlighter"></a>3. react-syntax-highlighter</h3><blockquote>
<p>功能 : 高亮代码块</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-syntax-highlighter</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Prism</span> <span class="keyword">as</span> <span class="title class_">SyntaxHighlighter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-syntax-highlighter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; dracula &#125; <span class="keyword">from</span> <span class="string">&quot;react-syntax-highlighter/dist/esm/styles/prism&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">components</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">code</span>(&#123; <span class="attr">node</span>, <span class="attr">inline</span>, <span class="attr">className</span>, <span class="attr">children</span>, <span class="attr">...props</span> &#125;) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">const</span> <span class="attr">match</span> = <span class="string">/language-(\w+)/.exec(className</span> || &quot;&quot;);</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">return</span> !<span class="attr">inline</span> &amp;&amp; <span class="attr">match</span> ? (</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &lt;<span class="attr">SyntaxHighlighter</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;dracula&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">language</span>=<span class="string">&#123;match[1]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">PreTag</span>=<span class="string">&quot;div&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;String(children).replace(/\n$/, &quot;&quot;)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">SyntaxHighlighter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ) : (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">code</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      &#123;markdown&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-markdown-to-jsx"><a href="#4-markdown-to-jsx" class="headerlink" title="4. markdown-to-jsx"></a>4. markdown-to-jsx</h3><blockquote>
<p>功能 : 可以将 Markdown 转换为 JSX 组件,轻量级 Markdown 渲染器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install markdown-to-jsx</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Markdown</span> <span class="keyword">from</span> <span class="string">&quot;markdown-to-jsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Markdown</span>&gt;</span>&#123;markdown&#125;<span class="tag">&lt;/<span class="name">Markdown</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-react-md-editor"><a href="#5-react-md-editor" class="headerlink" title="5. react-md-editor"></a>5. react-md-editor</h3><blockquote>
<p>功能 : Markdown 编辑器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @uiw/react-md-editor</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MDEditor</span> <span class="keyword">from</span> <span class="string">&quot;@uiw/react-md-editor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownEditor</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&quot;**Hello world!!!**&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MDEditor</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;setValue&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownEditor</span>;</span><br></pre></td></tr></table></figure>

<h2 id="配置-Markdown-解析"><a href="#配置-Markdown-解析" class="headerlink" title="配置 Markdown 解析"></a>配置 Markdown 解析</h2><ol>
<li>安装依赖包：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-markdown remark-gfm rehype-highlight</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建 Markdown 解析组件：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/components/MarkdownRenderer.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> remarkGfm <span class="keyword">from</span> <span class="string">&quot;remark-gfm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> rehypeHighlight <span class="keyword">from</span> <span class="string">&quot;rehype-highlight&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; content &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span> <span class="attr">remarkPlugins</span>=<span class="string">&#123;[remarkGfm]&#125;</span> <span class="attr">rehypePlugins</span>=<span class="string">&#123;[rehypeHighlight]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="自动生成目录"><a href="#自动生成目录" class="headerlink" title="自动生成目录"></a>自动生成目录</h2><blockquote>
<p>侧边导航栏</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在MarkdownRenderer组件中添加：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateTOC</span> = (<span class="params">content</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> headings = content.<span class="title function_">match</span>(<span class="regexp">/^##+ .+/gm</span>) || [];</span><br><span class="line">  <span class="keyword">return</span> headings.<span class="title function_">map</span>(<span class="function">(<span class="params">heading</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">level</span>: heading.<span class="title function_">match</span>(<span class="regexp">/##+/</span>)[<span class="number">0</span>].<span class="property">length</span>,</span><br><span class="line">    <span class="attr">title</span>: heading.<span class="title function_">replace</span>(<span class="regexp">/##+ /</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例：</span></span><br><span class="line"><span class="keyword">const</span> &#123; content &#125; = props;</span><br><span class="line"><span class="keyword">const</span> toc = <span class="title function_">generateTOC</span>(content);</span><br></pre></td></tr></table></figure>

<h2 id="样式优化"><a href="#样式优化" class="headerlink" title="样式优化"></a>样式优化</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/styles/markdown.scss</span></span><br><span class="line"><span class="selector-class">.markdown-body</span> &#123;</span><br><span class="line">  <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f8fa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整实现示例"><a href="#完整实现示例" class="headerlink" title="完整实现示例"></a>完整实现示例</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面组件使用示例：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&#x27;react-markdown&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> remarkGfm <span class="keyword">from</span> <span class="string">&#x27;remark-gfm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rehypeHighlight <span class="keyword">from</span> <span class="string">&#x27;rehype-highlight&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取table组件,避免React 在每次渲染时都看到一个新组件类型，从而销毁整个子树的 DOM 节点和状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderTableCom</span> = (<span class="params">&#123; node, ...props &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">overflowX:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">borderCollapse:</span> &#x27;<span class="attr">collapse</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">margin:</span> &#x27;<span class="attr">16px</span> <span class="attr">0</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderThCom</span> = (<span class="params">&#123; node, ...props &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">th</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">solid</span> #<span class="attr">ddd</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">padding:</span> &#x27;<span class="attr">8px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">backgroundColor:</span> &#x27;#<span class="attr">f5f5f5</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderTdCom</span> = (<span class="params">&#123; node, ...props &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">td</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">solid</span> #<span class="attr">ddd</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">padding:</span> &#x27;<span class="attr">8px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成目录的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateTOC</span> = (<span class="params">content</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 使用正则表达式匹配所有以 ## 开头的标题行</span></span><br><span class="line">  <span class="comment">// ^##+ 表示匹配以两个或更多 # 开头的行</span></span><br><span class="line">  <span class="comment">// .+ 表示匹配标题内容</span></span><br><span class="line">  <span class="comment">// gm 表示全局匹配和多行匹配</span></span><br><span class="line">  <span class="keyword">const</span> headings = content.<span class="title function_">match</span>(<span class="regexp">/^##+ .+/gm</span>) || [];</span><br><span class="line">  <span class="comment">// 将匹配到的标题行转换为目录项</span></span><br><span class="line">  <span class="keyword">return</span> headings.<span class="title function_">map</span>(<span class="function">(<span class="params">heading</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 获取标题的层级（通过计算 # 的数量）</span></span><br><span class="line">    <span class="attr">level</span>: heading.<span class="title function_">match</span>(<span class="regexp">/##+/</span>)[<span class="number">0</span>].<span class="property">length</span>,</span><br><span class="line">    <span class="comment">// 去除标题前的 # 和空格，获取纯文本标题</span></span><br><span class="line">    <span class="attr">title</span>: heading.<span class="title function_">replace</span>(<span class="regexp">/##+ /</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">id</span>: heading.<span class="title function_">replace</span>(<span class="regexp">/##+ /</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">toLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;-&#x27;</span>), <span class="comment">// 生成锚点 ID</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line react/prop-types</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownWithTOC</span> = (<span class="params">&#123; content &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [toc, setToc] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setToc</span>(<span class="title function_">generateTOC</span>(content));</span><br><span class="line">  &#125;, [content]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 目录侧边栏 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">aside</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">200px</span>&#x27;, <span class="attr">marginRight:</span> &#x27;<span class="attr">20px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>目录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;toc.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;item.id</span> || <span class="attr">index</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginLeft:</span> `$&#123;(<span class="attr">item.level</span> <span class="attr">-</span> <span class="attr">2</span>) * <span class="attr">15</span>&#125;<span class="attr">px</span>` &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;</span>`#$&#123;<span class="attr">item.id</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Markdown 内容 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">flex:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ReactMarkdown</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">remarkPlugins</span>=<span class="string">&#123;[remarkGfm]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rehypePlugins</span>=<span class="string">&#123;[rehypeHighlight]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">components</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">table:</span> <span class="attr">renderTableCom</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">th:</span> <span class="attr">renderThCom</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">td:</span> <span class="attr">renderTdCom</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownWithTOC</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="vite-项目加载-md-文件的两种方式"><a href="#vite-项目加载-md-文件的两种方式" class="headerlink" title="vite 项目加载 md 文件的两种方式"></a>vite 项目加载 md 文件的两种方式</h2><h3 id="1-使用-import-引用-推荐，性能好"><a href="#1-使用-import-引用-推荐，性能好" class="headerlink" title="1. 使用 import 引用 (推荐，性能好)"></a>1. 使用 import 引用 (推荐，性能好)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> markdownContent <span class="keyword">from</span> <span class="string">&quot;@/assets/interview-notes.md?raw&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>@&#x2F;assets&#x2F;interview-notes.md ：</li>
</ol>
<ul>
<li>@ 是 Vite 中配置的路径别名，通常指向 src 目录</li>
<li>表示从 src&#x2F;assets 目录下导入 interview-notes.md 文件</li>
</ul>
<ol start="2">
<li>?raw 后缀 ：</li>
</ol>
<ul>
<li>这是 Vite 的特殊查询参数</li>
<li>表示以原始字符串的形式导入文件内容，而不是作为模块处理</li>
<li>适合用于导入纯文本文件，如 Markdown、JSON 等</li>
</ul>
<ol start="3">
<li>markdownContent ：</li>
</ol>
<ul>
<li>导入的内容会被赋值给 markdownContent 变量</li>
<li>变量类型是字符串，包含 Markdown 文件的完整内容</li>
</ul>
<p>这种导入方式的特点：</p>
<ul>
<li><p>文件内容会在构建时被处理</p>
</li>
<li><p>支持热更新（HMR），修改文件后页面会自动刷新</p>
</li>
<li><p>相比 fetch 请求，性能更好，因为文件内容会被打包进 JavaScript 文件中<br>注意：需要确保 vite.config.js 中配置了正确的路径别名和 Markdown 文件处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="string">&quot;/src&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">assetsInclude</span>: [<span class="string">&quot;**/*.md&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-使用-fetch-请求】"><a href="#2-使用-fetch-请求】" class="headerlink" title="2. 使用 fetch 请求】"></a>2. 使用 fetch 请求】</h3></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [markdownContent, setMarkdownContent] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> [isLoading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">PROD</span></span><br><span class="line">      ? <span class="string">`<span class="subst">$&#123;<span class="keyword">import</span>.meta.env.BASE_URL&#125;</span>/interview-notes.md`</span></span><br><span class="line">      : <span class="string">&quot;/interview-notes.md&quot;</span></span><br><span class="line">  )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> <span class="title function_">setMarkdownContent</span>(text))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">  s;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<p>这种导入方式的特点：</p>
<ul>
<li><p>文件会被作为静态文件处理，不会被打包进 JavaScript 文件中, 需要处理开发环境和生产环境的路径问题</p>
</li>
<li><p>适合用于导入较大的文件，如图片、视频等</p>
</li>
<li><p>可以动态加载 Markdown 文件，根据需要进行请求</p>
</li>
<li><p>注意：需要确保 vite.config.js 中配置了正确的路径别名和 Markdown 文件处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="string">&quot;/src&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">assetsInclude</span>: [<span class="string">&quot;**/*.md&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol>
<li>配合 SSG 方案在构建时预解析 Markdown</li>
<li>使用自定义组件替换原生 HTML 标签</li>
<li>添加代码复制按钮等增强功能</li>
<li>实现目录自动滚动定位</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>学习目录</title>
    <url>/2024/03/24/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h2 id="算法题解"><a href="#算法题解" class="headerlink" title="算法题解"></a>算法题解</h2><h3 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h3><h4 id="数组-vs-链表"><a href="#数组-vs-链表" class="headerlink" title="数组 vs 链表"></a>数组 vs 链表</h4><p><strong>存储方式</strong></p>
<ul>
<li>数组：连续内存空间，预分配大小</li>
<li>链表：节点离散存储，动态扩展</li>
</ul>
<p><strong>时间复杂度对比</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>随机访问</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>头部插入</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
<tr>
<td>尾部追加</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<p><strong>应用场景</strong></p>
<ul>
<li>数组：需要频繁随机访问（如矩阵运算）</li>
<li>链表：频繁增删操作（如 LRU 缓存）</li>
</ul>
<h4 id="栈-队列"><a href="#栈-队列" class="headerlink" title="栈 &amp; 队列"></a>栈 &amp; 队列</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最小栈实现（支持O(1)获取最小值）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minStack</span> = [<span class="title class_">Infinity</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>(val);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(val, <span class="variable language_">this</span>.<span class="property">minStack</span>[<span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="property">length</span> - <span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getMin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">minStack</span>[<span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用队列实现栈</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue = collections.deque()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue.append(x)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.queue)-<span class="number">1</span>):</span><br><span class="line">            <span class="variable language_">self</span>.queue.append(<span class="variable language_">self</span>.queue.popleft())</span><br></pre></td></tr></table></figure>

<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p><strong>冲突解决</strong></p>
<ul>
<li>开放寻址法：线性探测、二次探测</li>
<li>链地址法：链表存储冲突元素（Java HashMap）</li>
</ul>
<h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul>
<li>完全二叉树结构，可用数组实现</li>
<li>应用场景：TopK 问题（时间复杂度 O(nlogk)）</li>
</ul>
<hr>
<h3 id="典型算法"><a href="#典型算法" class="headerlink" title="典型算法"></a>典型算法</h3><p><strong>快速排序优化</strong></p>
<ol>
<li>三数取中法选择 pivot</li>
<li>小数组切换插入排序</li>
<li>三向切分（处理大量重复元素）</li>
</ol>
<p><strong>面试高频问题</strong></p>
<ul>
<li>如何判断链表有环？快慢指针 vs 哈希表</li>
<li>二叉树层序遍历的时空复杂度？</li>
<li>海量数据求 TopK 为什么用堆不用排序？</li>
</ul>
<h3 id="典型算法-1"><a href="#典型算法-1" class="headerlink" title="典型算法"></a>典型算法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">const</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> left = [];</span><br><span class="line">  <span class="keyword">const</span> right = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] &lt; pivot ? left.<span class="title function_">push</span>(arr[i]) : right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left), pivot, ...<span class="title function_">quickSort</span>(right)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端核心"><a href="#前端核心" class="headerlink" title="前端核心"></a>前端核心</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><strong>实现机制</strong></p>
<ol>
<li>每个对象都有 <code>__proto__</code> 属性指向构造函数的 prototype</li>
<li>每个构造函数也是函数，其 <code>__proto__</code> 指向 Function.prototype</li>
<li>Function.prototype 的 <code>__proto__</code> 指向 Object.prototype</li>
<li>Object.prototype 的 <code>__proto__</code> 指向 null (原型链的终点即是 Object.prototype)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; eating&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><strong>核心特征</strong></p>
<ul>
<li>函数嵌套结构（函数内部定义函数）</li>
<li>内部函数引用了外部函数的变量</li>
<li>延长变量生命周期（内部函数在外部函数执行完毕后仍然可以被访问）</li>
</ul>
<p><strong>闭包的关键特征：</strong></p>
<ul>
<li>保持对词法作用域的引用</li>
<li>即使外部函数已经执行完毕，闭包仍然可以访问外部函数的变量</li>
<li>闭包会阻止垃圾回收机制回收被引用的变量</li>
</ul>
<p><strong>闭包的典型应用场景：</strong></p>
<ul>
<li>数据封装和私有变量</li>
<li>回调函数</li>
<li>函数柯里化</li>
<li>模块模式</li>
</ul>
<p><strong>内存泄漏案例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createHeavy</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bigData = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> bigData; <span class="comment">// 闭包持有bigData引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案：显式释放引用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bigData = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getData</span>: <span class="function">() =&gt;</span> bigData,</span><br><span class="line">    <span class="attr">clear</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      bigData.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p><strong>浏览器环境</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>));</span><br><span class="line"><span class="comment">// 输出顺序：1 -&gt; 3 -&gt; 2</span></span><br></pre></td></tr></table></figure>

<p><strong>Node.js 环境</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(__filename, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>), <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出顺序：2 -&gt; 1（在I/O阶段setImmediate优先）</span></span><br></pre></td></tr></table></figure>

<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><strong>类组件 vs 函数组件</strong></p>
<ul>
<li>挂载阶段：constructor → render → componentDidMount</li>
<li>更新阶段：shouldComponentUpdate → render → componentDidUpdate</li>
<li>卸载阶段：componentWillUnmount</li>
</ul>
<p><strong>Hooks 执行顺序</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// componentDidMount</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父组件 mounted&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父组件 unmount&quot;</span>); <span class="comment">// componentWillUnmount</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">// 状态初始化</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Hooks-使用"><a href="#Hooks-使用" class="headerlink" title="Hooks 使用"></a>Hooks 使用</h4><p><strong>最佳实践</strong></p>
<ol>
<li>用 useMemo 缓存昂贵计算</li>
<li>用 useCallback 避免子组件无效重渲染</li>
<li>自定义 Hook 封装通用逻辑</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义Hook实现防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useDebounce</span>(<span class="params">value, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [debouncedValue, setDebouncedValue] = <span class="title function_">useState</span>(value);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setDebouncedValue</span>(value);</span><br><span class="line">    &#125;, delay);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(handler);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [value, delay]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debouncedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="虚拟-DOM-原理"><a href="#虚拟-DOM-原理" class="headerlink" title="虚拟 DOM 原理"></a>虚拟 DOM 原理</h4><p><strong>Diff 算法优化策略</strong></p>
<ol>
<li>同级比较（时间复杂度 O(n^3)→O(n)）</li>
<li>key 属性优化列表对比</li>
<li>双缓存技术避免白屏</li>
</ol>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ul>
<li>CAP 定理</li>
<li>RESTful 设计</li>
<li>缓存策略</li>
</ul>
<h3 id="典型系统"><a href="#典型系统" class="headerlink" title="典型系统"></a>典型系统</h3><ul>
<li>短链接系统</li>
<li>秒杀系统</li>
<li>即时通讯系统</li>
</ul>
<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>进程&#x2F;线程</li>
<li>内存管理</li>
<li>文件系统</li>
</ul>
<h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><ul>
<li>TCP&#x2F;IP 协议栈</li>
<li>HTTP&#x2F;2 特性</li>
<li>WebSocket 原理</li>
</ul>
<hr>
<p>持续更新中…</p>
]]></content>
      <categories>
        <category>目录</category>
      </categories>
  </entry>
</search>
