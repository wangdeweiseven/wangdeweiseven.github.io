<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>手写 Promise 实现指南：从规范到代码实践</title>
    <url>/2022/05/02/ES6-Promise/</url>
    <content><![CDATA[<h2 id="一-Promise-A-规范与需求背景"><a href="#一-Promise-A-规范与需求背景" class="headerlink" title="一. Promise&#x2F;A+ 规范与需求背景"></a>一. Promise&#x2F;A+ 规范与需求背景</h2><h3 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h3><p>在 JavaScript 的异步编程中，传统的回调函数存在 “回调地狱”（层层嵌套难以维护）和 “错误处理困难” 的问题。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="function">(<span class="params">err, data1</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(data1, <span class="function">(<span class="params">err, data2</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(data2, <span class="function">(<span class="params">err, data3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Promise 应运而生，通过链式调用 .then() 将嵌套转为线性结构，同时提供统一的错误捕获机制</p>
<h3 id="Promise-A-规范核心"><a href="#Promise-A-规范核心" class="headerlink" title="Promise&#x2F;A+ 规范核心"></a>Promise&#x2F;A+ 规范核心</h3><h3 id="1-三种状态"><a href="#1-三种状态" class="headerlink" title="1. 三种状态"></a>1. 三种状态</h3><ul>
<li><strong>Pending</strong>：初始状态，可转为 Fulfilled 或 Rejected。</li>
<li><strong>Fulfilled</strong>：成功态，必须有不可变的值（value）。</li>
<li><strong>Rejected</strong>：失败态，必须有不可变的原因（reason）。</li>
</ul>
<h3 id="2-then-方法行为"><a href="#2-then-方法行为" class="headerlink" title="2. then 方法行为"></a>2. then 方法行为</h3><ul>
<li>接受 <code>onFulfilled</code> 和 <code>onRejected</code> 两个回调（可选）。</li>
<li>回调必须异步执行（如 <code>setTimeout</code> 或微任务）。</li>
<li>可被多次调用，按注册顺序执行。</li>
<li>必须返回新 Promise，支持链式调用。</li>
</ul>
<h3 id="3-解决过程（Resolution-Procedure）"><a href="#3-解决过程（Resolution-Procedure）" class="headerlink" title="3. 解决过程（Resolution Procedure）"></a>3. 解决过程（Resolution Procedure）</h3><ul>
<li>若回调返回值是 Promise，则等待其状态；若是普通值，则直接传递。</li>
<li>处理循环引用（如返回自身会报错）。</li>
</ul>
<h2 id="二-手写-Promise-实现步骤"><a href="#二-手写-Promise-实现步骤" class="headerlink" title="二. 手写 Promise 实现步骤"></a>二. 手写 Promise 实现步骤</h2><h3 id="Step-1：基本框架与状态管理"><a href="#Step-1：基本框架与状态管理" class="headerlink" title="Step 1：基本框架与状态管理"></a>Step 1：基本框架与状态管理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = []; <span class="comment">// 成功回调队列</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = []; <span class="comment">// 失败回调队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>()); <span class="comment">// 触发回调</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject); <span class="comment">// 立即执行</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(e); <span class="comment">// 捕获同步错误</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step-2：实现-then-方法"><a href="#Step-2：实现-then-方法" class="headerlink" title="Step 2：实现 then 方法"></a>Step 2：实现 then 方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理值穿透（参数非函数时提供默认值）</span></span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err; &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleFulfilled</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 确保异步执行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似处理 handleRejected...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">handleFulfilled</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">handleRejected</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// pending 状态，存入队列</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(handleFulfilled);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(handleRejected);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step-3：解决过程与链式调用"><a href="#Step-3：解决过程与链式调用" class="headerlink" title="Step 3：解决过程与链式调用"></a>Step 3：解决过程与链式调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;循环引用&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">    x.<span class="title function_">then</span>(resolve, reject); <span class="comment">// 等待 x 的状态</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x); <span class="comment">// 普通值直接传递</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step-4：错误冒泡与-catch-方法"><a href="#Step-4：错误冒泡与-catch-方法" class="headerlink" title="Step 4：错误冒泡与 catch 方法"></a>Step 4：错误冒泡与 catch 方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整的手写代码"><a href="#完整的手写代码" class="headerlink" title="完整的手写代码"></a>完整的手写代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Promise类，实现了基本的Promise功能，包括链式调用、异步处理和错误捕获。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构造函数，接收一个执行器函数。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">executor</span> - 执行器函数，接收两个参数：resolve和reject。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;pending&quot;</span>; <span class="comment">// 初始状态，Promise的初始状态为pending</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>; <span class="comment">// 成功值，当Promise状态变为fulfilled时，存储成功的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>; <span class="comment">// 失败原因，当Promise状态变为rejected时，存储失败的原因</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = []; <span class="comment">// 成功回调队列，存储在Promise状态变为fulfilled时需要执行的回调函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = []; <span class="comment">// 失败回调队列，存储在Promise状态变为rejected时需要执行的回调函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决函数，用于将Promise状态从pending变为fulfilled。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; <span class="variable">value</span> - 成功的值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 只有当Promise状态为pending时，才能将状态变为fulfilled</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="comment">// 执行所有成功回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拒绝函数，用于将Promise状态从pending变为rejected。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; <span class="variable">reason</span> - 失败的原因。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 只有当Promise状态为pending时，才能将状态变为rejected</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;pending&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        <span class="comment">// 执行所有失败回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 立即执行执行器</span></span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 捕获同步错误</span></span><br><span class="line">      <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 为Promise实例添加成功和失败回调。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">onFulfilled</span> - 成功回调函数。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">onRejected</span> - 失败回调函数。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">MyPromise</span>&#125; - 返回一个新的Promise实例，用于链式调用。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理值穿透，默认函数</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&quot;function&quot;</span> ? onFulfilled : <span class="function">(<span class="params">v</span>) =&gt;</span> v;</span><br><span class="line">    onRejected =</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">&quot;function&quot;</span></span><br><span class="line">        ? onRejected</span><br><span class="line">        : <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 处理成功回调的函数。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">handleFulfilled</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 确保异步执行</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="comment">// 解析Promise结果</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 处理失败回调的函数。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">handleRejected</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">            <span class="comment">// 解析Promise结果</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;fulfilled&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">handleFulfilled</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">handleRejected</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// pending状态，存入回调队列</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(handleFulfilled);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(handleRejected);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2; <span class="comment">// 返回新Promise实现链式调用</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解析Promise结果，处理循环引用和嵌套Promise。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">MyPromise</span>&#125; <span class="variable">promise2</span> - 新的Promise实例。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; <span class="variable">x</span> - 回调函数的返回值。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">resolve</span> - 解决函数。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">reject</span> - 拒绝函数。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 防止 const p = new Promise.then(() =&gt; p) 会导致死循环</span></span><br><span class="line">    <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">      <span class="comment">// 循环引用检测</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Chaining cycle detected&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理Promise对象 （当then 返回的是promise，</span></span><br><span class="line">    <span class="comment">// 如：此处也是一个异步操作时，为了保证后一个then能接受到此处异步操作的返回值，</span></span><br><span class="line">    <span class="comment">// 如不处理后一个then接受的会是一个Promise对象，进而无法实现链式调用）</span></span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      x.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 普通值直接resolve</span></span><br><span class="line">      <span class="title function_">resolve</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 为Promise实例添加失败回调。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">onRejected</span> - 失败回调函数。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">MyPromise</span>&#125; - 返回一个新的Promise实例，用于链式调用。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三-测试用例与验证"><a href="#三-测试用例与验证" class="headerlink" title="三. 测试用例与验证"></a>三. 测试用例与验证</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试链式调用与异步</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 1秒后输出: success</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(res + <span class="string">&quot; again&quot;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res)); <span class="comment">// 输出: success again</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试错误捕获</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)); <span class="comment">// 捕获同步错误</span></span><br></pre></td></tr></table></figure>

<h2 id="四-扩展与总结"><a href="#四-扩展与总结" class="headerlink" title="四. 扩展与总结"></a>四. 扩展与总结</h2><h3 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h3><ul>
<li><p>静态方法：实现 Promise.all（所有成功）、Promise.race（竞速）11。</p>
</li>
<li><p>微任务优化：用 MutationObserver 替代 setTimeout 实现更高效的异步调度。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Promise 通过状态机、回调队列和链式调用，将异步逻辑线性化。手写实现需严格遵循 Promise&#x2F;A+ 规范，核心在于 then 的异步处理和解决过程的递归解析。理解这一机制有助于掌握 JavaScript 异步编程的精髓</p>
<h2 id="补充-（详解-测试用例-代码执行过程）"><a href="#补充-（详解-测试用例-代码执行过程）" class="headerlink" title="补充 （详解 测试用例 代码执行过程）"></a>补充 （详解 测试用例 代码执行过程）</h2><h3 id="测试用例："><a href="#测试用例：" class="headerlink" title="测试用例："></a>测试用例：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 1秒后输出: success</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(res + <span class="string">&quot; again&quot;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res)); <span class="comment">// 输出: success again</span></span><br></pre></td></tr></table></figure>

<h3 id="1-Promise-初始化"><a href="#1-Promise-初始化" class="headerlink" title="1. Promise 初始化"></a>1. Promise 初始化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li>创建 MyPromise 实例，立即执行 executor 函数</li>
<li>遇到 setTimeout ，将回调函数放入宏任务队列，1 秒后执行</li>
<li>此时 Promise 状态为 pending ，主线程继续执行后续代码</li>
</ol>
<h3 id="2-第一个-then-方法调用"><a href="#2-第一个-then-方法调用" class="headerlink" title="2. 第一个 then 方法调用"></a>2. 第一个 then 方法调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(res + <span class="string">&quot; again&quot;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li>调用 then 方法时 Promise 仍处于 pending 状态</li>
<li>将回调函数 (res) &#x3D;&gt; { console… } 存入 onFulfilledCallbacks 队列</li>
<li>then 方法返回一个新的 Promise (promise2)</li>
</ol>
<h3 id="3-第二个-then-方法调用"><a href="#3-第二个-then-方法调用" class="headerlink" title="3. 第二个 then 方法调用"></a>3. 第二个 then 方法调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li>继续在 promise2 上调用 then</li>
<li>由于 promise2 也处于 pending 状态，将回调存入它的 onFulfilledCallbacks</li>
<li>返回第三个 Promise (promise3)</li>
</ol>
<h3 id="4-1-秒后-setTimeout-回调执行"><a href="#4-1-秒后-setTimeout-回调执行" class="headerlink" title="4. 1 秒后 setTimeout 回调执行"></a>4. 1 秒后 setTimeout 回调执行</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">() =&gt; <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li>调用 resolve(“success”) ，将第一个 Promise 状态改为 fulfilled</li>
<li>设置 this.value &#x3D; “success”</li>
<li>执行 onFulfilledCallbacks 中的回调（第一个 then 的回调）</li>
</ol>
<h3 id="5-执行第一个-then-的回调"><a href="#5-执行第一个-then-的回调" class="headerlink" title="5. 执行第一个 then 的回调"></a>5. 执行第一个 then 的回调</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(res) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 输出 &quot;success&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li>创建新的 Promise (promise4)，立即执行其 executor</li>
<li>同步调用 resolve(“success again”) ，promise4 状态变为 fulfilled</li>
<li>这个返回值会通过 resolvePromise 传递给 promise2</li>
</ol>
<h3 id="6-执行第二个-then-的回调"><a href="#6-执行第二个-then-的回调" class="headerlink" title="6. 执行第二个 then 的回调"></a>6. 执行第二个 then 的回调</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(res) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 输出 &quot;success again&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>执行过程：</strong></p>
<ol>
<li>promise2 的 resolvePromise 处理返回的 promise4</li>
<li>由于 promise4 已经是 fulfilled 状态，立即执行第二个 then 的回调</li>
<li>输出拼接后的字符串 “success again”</li>
</ol>
<h3 id="完整执行时序图"><a href="#完整执行时序图" class="headerlink" title="完整执行时序图"></a>完整执行时序图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主线程:</span><br><span class="line">1. 创建 Promise → 设置 setTimeout → 注册 then1 → 注册 then2</span><br><span class="line">   (所有 then 回调都存入队列)</span><br><span class="line"></span><br><span class="line">宏任务队列:</span><br><span class="line">[ 1秒后:</span><br><span class="line">  1. 执行 setTimeout 回调 → resolve → 触发 then1 回调</span><br><span class="line">  2. then1 返回新 Promise → 触发 then2 回调</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="关键点说明"><a href="#关键点说明" class="headerlink" title="关键点说明"></a>关键点说明</h3><ol>
<li>异步机制 ：通过 setTimeout 实现真正的异步，符合 Promise&#x2F;A+ 规范</li>
<li>链式调用 ：每个 then 都返回新 Promise，形成调用链</li>
<li>值传递 ：前一个 then 的返回值会作为参数传给下一个 then</li>
<li>状态管理 ：<ul>
<li>初始 Promise 从 pending → fulfilled</li>
<li>then 返回的新 Promise 根据回调执行结果改变状态</li>
</ul>
</li>
</ol>
<h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><h3 id="1-resolvePromise-的作用"><a href="#1-resolvePromise-的作用" class="headerlink" title="1. resolvePromise 的作用"></a>1. resolvePromise 的作用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 循环引用检测</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Chaining cycle detected&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 处理返回的Promise对象</span></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">    x.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 处理普通值</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="详细解析："><a href="#详细解析：" class="headerlink" title="详细解析："></a>详细解析：</h4><ol>
<li><p>循环引用检测</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Chaining cycle detected&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>防止类似 promise.then(() &#x3D;&gt; promise) 的循环引用</li>
<li>如果检测到循环引用，直接 reject 一个 TypeError</li>
</ul>
</li>
<li><p>处理 Promise 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里的x是上一个then的返回值,此处为一个Promise，为了确保下一个then能接受到此处异步操作的返回值，</span></span><br><span class="line">  <span class="comment">// 需要将外层的Promise对象的resoleve和reject传入，进而捕获此处异步操作的返回值,便于传递给下一个then</span></span><br><span class="line">  x.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当回调函数返回的是另一个 Promise 时（如 return new MyPromise(…) ）</li>
<li>会等待这个 Promise 完成，然后将其结果传递给外层 Promise</li>
<li>例如： return new MyPromise(resolve &#x3D;&gt; resolve(42)) 会等待内部 Promise 完成</li>
</ul>
</li>
<li><p>处理普通值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当回调函数返回非 Promise 值时（如数字、字符串、对象等）</li>
<li>直接将该值作为外层 Promise 的解决值</li>
<li>例如： return 42 会直接 resolve(42)</li>
</ul>
</li>
</ol>
<h4 id="关键作用："><a href="#关键作用：" class="headerlink" title="关键作用："></a>关键作用：</h4><ol>
<li>实现链式调用的核心 ：处理 then 方法回调函数的返回值</li>
<li>支持 Promise 嵌套 ：能够正确处理返回 Promise 的情况</li>
<li>类型安全 ：防止循环引用导致的无限递归</li>
</ol>
<h4 id="实际应用示例："><a href="#实际应用示例：" class="headerlink" title="实际应用示例："></a>实际应用示例：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="title function_">r</span>(res + <span class="number">1</span>)); <span class="comment">// 返回Promise</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> res + <span class="number">1</span>; <span class="comment">// 返回普通值</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>这个方法确保了 Promise 链式调用时，无论回调函数返回的是普通值还是 Promise 对象，都能正确传递和处理值。</p>
<h3 id="2-onFulfilled-和-onRejected-为什么必须异步执行"><a href="#2-onFulfilled-和-onRejected-为什么必须异步执行" class="headerlink" title="2. onFulfilled 和 onRejected 为什么必须异步执行"></a>2. onFulfilled 和 onRejected 为什么必须异步执行</h3><h4 id="规范要求"><a href="#规范要求" class="headerlink" title="规范要求"></a>规范要求</h4><ul>
<li>Promise&#x2F;A+ 规范 2.2.4 条明确规定：onFulfilled 和 onRejected 必须异步执行</li>
<li>即使 Promise 已经处于 resolved 状态，then 方法的回调也必须异步调用</li>
</ul>
<h4 id="执行顺序保证-："><a href="#执行顺序保证-：" class="headerlink" title="执行顺序保证 ："></a>执行顺序保证 ：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确输出顺序应该是 3 -&gt; 2</span></span><br><span class="line"><span class="comment">// 如果同步执行则会输出 2 -&gt; 3</span></span><br></pre></td></tr></table></figure>

<h4 id="一致性保证"><a href="#一致性保证" class="headerlink" title="一致性保证"></a>一致性保证</h4><ul>
<li>无论 Promise 是立即解决还是稍后解决，<code>then</code> 回调的执行时机保持一致。</li>
<li>避免出现有时同步有时异步的不确定行为。</li>
</ul>
<h4 id="避免潜在问题"><a href="#避免潜在问题" class="headerlink" title="避免潜在问题"></a>避免潜在问题</h4><ul>
<li>同步执行可能导致调用栈过深（如递归调用 <code>then</code> 方法时）。</li>
<li>同步执行可能打断当前执行的代码流程，导致意外行为。</li>
</ul>
<h4 id="微任务机制"><a href="#微任务机制" class="headerlink" title="微任务机制"></a>微任务机制</h4><ul>
<li>原生 Promise 使用微任务队列（microtask）实现异步。</li>
<li>这里用 <code>setTimeout</code> 模拟（虽然它是宏任务），因为简单实现通常不区分微任务和宏任务。</li>
</ul>
<p><strong>实际应用场景示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果不异步执行，以下代码会有问题：</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(num));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确输出顺序应为：1, 2, 4, 3</span></span><br><span class="line"><span class="comment">// 如果同步执行 then 回调，则会输出：1, 3, 2, 4</span></span><br></pre></td></tr></table></figure>

<p>因此，虽然同步执行看起来更高效，但为了符合规范和行为一致性，必须使用异步执行。在更完整的实现中，应该使用微任务（如 queueMicrotask 或 process.nextTick）而不是 setTimeout，但这里作为简单实现已经足够。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://es6.ruanyifeng.com/#docs/promise">阮大神-ES6</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 执行上下文、调用栈与队列</title>
    <url>/2022/05/01/JavaScript-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E3%80%81%E8%B0%83%E7%94%A8%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><h3 id="什么是执行上下文"><a href="#什么是执行上下文" class="headerlink" title="什么是执行上下文"></a>什么是执行上下文</h3><blockquote>
<p>执行上下文（Execution Context）是 JavaScript 代码被评估和执行时的环境概念。</p>
</blockquote>
<h3 id="执行上下文的类型"><a href="#执行上下文的类型" class="headerlink" title="执行上下文的类型"></a>执行上下文的类型</h3><ol>
<li><p><strong>全局执行上下文</strong></p>
<ul>
<li>默认的、基础的执行上下文</li>
<li>创建全局对象（浏览器中为 <code>window</code>，Node.js 中为 <code>global</code>）</li>
<li>将 <code>this</code> 指向全局对象</li>
</ul>
</li>
<li><p><strong>函数执行上下文</strong></p>
<ul>
<li>每次函数调用时创建</li>
<li>每个函数都有自己的执行上下文</li>
</ul>
</li>
<li><p><strong>Eval 执行上下文</strong></p>
<ul>
<li>在 <code>eval</code> 函数内部的代码有自己的执行上下文</li>
</ul>
</li>
</ol>
<h3 id="执行上下文的生命周期"><a href="#执行上下文的生命周期" class="headerlink" title="执行上下文的生命周期"></a>执行上下文的生命周期</h3><ol>
<li><p><strong>创建阶段</strong></p>
<ul>
<li>创建变量对象（VO）<ul>
<li>函数参数（函数上下文）</li>
<li>函数声明（优先）</li>
<li>变量声明（初始值为 <code>undefined</code>）</li>
</ul>
</li>
<li>建立作用域链</li>
<li>确定 <code>this</code> 指向</li>
</ul>
</li>
<li><p><strong>执行阶段</strong></p>
<ul>
<li>变量赋值</li>
<li>函数引用</li>
<li>执行代码</li>
</ul>
</li>
<li><p><strong>回收阶段</strong></p>
<ul>
<li>执行完毕后，等待垃圾回收</li>
</ul>
</li>
</ol>
<h3 id="变量提升示例"><a href="#变量提升示例" class="headerlink" title="变量提升示例"></a>变量提升示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><h3 id="什么是调用栈"><a href="#什么是调用栈" class="headerlink" title="什么是调用栈"></a>什么是调用栈</h3><blockquote>
<p>调用栈（Call Stack）是一种数据结构，用于记录代码执行的位置。</p>
</blockquote>
<h3 id="调用栈的特点"><a href="#调用栈的特点" class="headerlink" title="调用栈的特点"></a>调用栈的特点</h3><ol>
<li>后进先出（LIFO）结构</li>
<li>同步执行</li>
<li>栈溢出：当超过最大调用栈大小时会抛出错误</li>
</ol>
<h3 id="调用栈示例"><a href="#调用栈示例" class="headerlink" title="调用栈示例"></a>调用栈示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">first</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">  <span class="title function_">second</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">second</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Second&quot;</span>);</span><br><span class="line">  <span class="title function_">third</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">third</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Third&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">first</span>();</span><br></pre></td></tr></table></figure>

<p><strong><em>调用栈变化</em></strong>：</p>
<ol>
<li>first() 入栈</li>
<li>second() 入栈</li>
<li>third() 入栈</li>
<li>third() 出栈</li>
<li>second() 出栈</li>
<li>first() 出栈</li>
</ol>
<h3 id="栈溢出示例"><a href="#栈溢出示例" class="headerlink" title="栈溢出示例"></a>栈溢出示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">recursive</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">recursive</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">recursive</span>(); <span class="comment">// Uncaught RangeError: Maximum call stack size exceeded</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="事件循环与任务队列"><a href="#事件循环与任务队列" class="headerlink" title="事件循环与任务队列"></a>事件循环与任务队列</h2><h3 id="JavaScript-运行时模型"><a href="#JavaScript-运行时模型" class="headerlink" title="JavaScript 运行时模型"></a>JavaScript 运行时模型</h3><ol>
<li>调用栈：同步代码执行</li>
<li>Web APIs：浏览器提供的异步功能（setTimeout, DOM 事件等）</li>
<li>任务队列：回调函数等待执行</li>
<li>事件循环：监控调用栈和任务队列</li>
</ol>
<h3 id="任务队列类型"><a href="#任务队列类型" class="headerlink" title="任务队列类型"></a>任务队列类型</h3><ol>
<li><p>宏任务队列（Macrotask Queue）</p>
<ul>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate (Node.js)</li>
<li>I&#x2F;O 操作</li>
<li>UI 渲染</li>
<li>事件回调</li>
</ul>
</li>
<li><p>微任务队列（Microtask Queue）</p>
<ul>
<li>Promise.then&#x2F;catch&#x2F;finally</li>
<li>MutationObserver</li>
<li>process.nextTick (Node.js)</li>
</ul>
</li>
</ol>
<h3 id="事件循环流程"><a href="#事件循环流程" class="headerlink" title="事件循环流程"></a>事件循环流程</h3><ol>
<li>执行同步代码（调用栈）</li>
<li>遇到异步任务，交给 Web APIs 处理</li>
<li>同步代码执行完毕，调用栈为空</li>
<li>检查微任务队列，执行所有微任务</li>
<li>如有必要，进行 UI 渲染</li>
<li>从宏任务队列取出一个任务执行</li>
<li>重复上述过程</li>
</ol>
<h3 id="执行顺序示例"><a href="#执行顺序示例" class="headerlink" title="执行顺序示例"></a>执行顺序示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Promise 1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Promise 2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Script end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序:</span></span><br><span class="line"><span class="comment">// Script start</span></span><br><span class="line"><span class="comment">// Script end</span></span><br><span class="line"><span class="comment">// Promise 1</span></span><br><span class="line"><span class="comment">// Promise 2</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>JavaScript 基础知识</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript 基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全必修课-XSS与CSRF攻击</title>
    <url>/2022/07/05/Web%E5%AE%89%E5%85%A8%E5%BF%85%E4%BF%AE%E8%AF%BE-XSS%E4%B8%8ECSRF%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="一、XSS-攻击（跨站脚本攻击）"><a href="#一、XSS-攻击（跨站脚本攻击）" class="headerlink" title="一、XSS 攻击（跨站脚本攻击）"></a>一、XSS 攻击（跨站脚本攻击）</h2><h3 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>想象在论坛的留言板里，攻击者提交的内容是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  盗取用户cookie的代码;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当其他用户浏览这条留言时，恶意脚本就会在他们的浏览器中执行，就像在真实的网站中运行一样</p>
<h3 id="三种常见类型"><a href="#三种常见类型" class="headerlink" title="三种常见类型"></a>三种常见类型</h3><h4 id="1-反射型-XSS（临时攻击）"><a href="#1-反射型-XSS（临时攻击）" class="headerlink" title="1. 反射型 XSS（临时攻击）"></a>1. 反射型 XSS（临时攻击）</h4><ul>
<li>通过 URL 参数注入恶意脚本</li>
</ul>
<ul>
<li>示例链接：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">https://example.com/search?q=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-存储型-XSS（持久化攻击）"><a href="#2-存储型-XSS（持久化攻击）" class="headerlink" title="2. 存储型 XSS（持久化攻击）"></a>2. 存储型 XSS（持久化攻击）</h4><ul>
<li><p>恶意脚本被保存到数据库</p>
</li>
<li><p>常见场景：用户评论、私信内容</p>
</li>
</ul>
<h4 id="3-DOM-型-XSS（纯前端攻击）"><a href="#3-DOM-型-XSS（纯前端攻击）" class="headerlink" title="3. DOM 型 XSS（纯前端攻击）"></a>3. DOM 型 XSS（纯前端攻击）</h4><ul>
<li><p>不经过服务器，前端直接操作 DOM 时触发</p>
</li>
<li><p>示例代码</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从URL获取参数直接插入页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h3 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h3><h4 id="1-输入过滤"><a href="#1-输入过滤" class="headerlink" title="1. 输入过滤"></a>1. 输入过滤</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 过滤特殊字符函数示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sanitize</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> input.<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&quot;&amp;lt;&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&quot;&amp;gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-输出转义"><a href="#2-输出转义" class="headerlink" title="2. 输出转义"></a>2. 输出转义</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板引擎自动转义（双花括号语法会自动对插入的内容进行HTML实体转义，如：&lt;script&gt; 会被转义为 &amp;lt;script&amp;gt;） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; userContent &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 手动转义示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&lt;%- dangerousData %&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-Content-Security-Policy（简称-CSP-内容安全策略）"><a href="#3-Content-Security-Policy（简称-CSP-内容安全策略）" class="headerlink" title="3. Content-Security-Policy（简称:CSP 内容安全策略）"></a>3. Content-Security-Policy（简称:CSP 内容安全策略）</h4><blockquote>
<p>是浏览器提供的一种强大的安全机制，主要用于防范跨站脚本攻击(XSS)等安全威胁。它的核心思想是通过白名单机制，告诉浏览器&gt; 哪些外部资源可以被加载和执行</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span>:</span><br><span class="line">  default-src &#x27;self&#x27;;  // 默认策略，只允许加载同源资源</span><br><span class="line">  script-src &#x27;self&#x27; https://trusted.cdn.com; // 脚本只能从同源或指定CDN加载</span><br><span class="line">  img-src *; // 图片可以从任何来源加载</span><br><span class="line">  style-src &#x27;unsafe-inline&#x27;; //  允许内联样式(有一定风险)</span><br></pre></td></tr></table></figure>

<h4 id="4-HttpOnly-Cookie"><a href="#4-HttpOnly-Cookie" class="headerlink" title="4. HttpOnly Cookie"></a>4. HttpOnly Cookie</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务端设置Cookie时</span></span><br><span class="line"><span class="title class_">Set</span>-<span class="title class_">Cookie</span>: sessionId=abc123; <span class="title class_">HttpOnly</span>; <span class="title class_">Secure</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>HttpOnly - 重要安全属性，作用是：</p>
<ul>
<li>禁止 JavaScript 通过 document.cookie 访问该 Cookie</li>
<li>有效防范 XSS 攻击窃取 Cookie</li>
</ul>
</li>
</ul>
<ul>
<li><p>Secure - 安全传输属性，作用是：</p>
<ul>
<li>该 Cookie 只能通过 HTTPS 协议传输</li>
<li>防止在 HTTP 明文传输中被窃听</li>
</ul>
</li>
</ul>
<hr>
<h2 id="二、CSRF-攻击（跨站请求伪造）"><a href="#二、CSRF-攻击（跨站请求伪造）" class="headerlink" title="二、CSRF 攻击（跨站请求伪造）"></a>二、CSRF 攻击（跨站请求伪造）</h2><h3 id="攻击原理-1"><a href="#攻击原理-1" class="headerlink" title="攻击原理"></a>攻击原理</h3><p>假设用户登录了银行网站，攻击者构造的钓鱼页面中包含：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bank.com/transfer?to=hacker&amp;amount=1000000&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>当用户访问该页面时，浏览器会自动携带银行网站的 Cookie 发起转账请求</p>
<h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><ol>
<li>用户登录信任网站 A</li>
<li>网站 A 下发身份 Cookie</li>
<li>用户访问恶意网站 B</li>
<li>网站 B 诱导浏览器向网站 A 发起请求</li>
<li>浏览器自动携带 Cookie 完成请求</li>
</ol>
<h3 id="防御方案-1"><a href="#防御方案-1" class="headerlink" title="防御方案"></a>防御方案</h3><ol>
<li>CSRF Token 验证</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务端生成Token</span></span><br><span class="line"><span class="keyword">const</span> csrfToken = crypto.<span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端表单携带Token</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/transfer&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_csrf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;%= csrfToken %&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 其他表单字段 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 服务端中间件验证</span></span><br><span class="line"><span class="language-xml">app.post(&#x27;/transfer&#x27;, (req, res) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">  if(req.body._csrf !== req.session.csrfToken) &#123;</span></span><br><span class="line"><span class="language-xml">    return res.status(403).send(&#x27;CSRF验证失败&#x27;);</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">  // 处理业务逻辑</span></span><br><span class="line"><span class="language-xml">&#125;);</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>SameSite Cookie 属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置Cookie时</span></span><br><span class="line"><span class="title class_">Set</span>-<span class="title class_">Cookie</span>: sessionId=abc123; <span class="title class_">SameSite</span>=<span class="title class_">Lax</span>; <span class="title class_">Secure</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Strict：完全禁止第三方 Cookie</li>
<li>Lax：允许部分安全请求（默认值）</li>
<li>None：关闭保护（需配合 Secure）</li>
</ul>
<ol start="3">
<li>验证请求来源</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查Referer头</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  req.<span class="property">headers</span>.<span class="property">referer</span> &amp;&amp;</span><br><span class="line">  !req.<span class="property">headers</span>.<span class="property">referer</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;https://trusted-domain.com&quot;</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;非法请求来源&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>双重 Cookie 验证</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端在请求头中携带Cookie信息</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;/api/transfer&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;X-CSRF-TOKEN&quot;</span>: <span class="title function_">getCookie</span>(<span class="string">&quot;csrfToken&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端比对Cookie与Header中的值</span></span><br><span class="line"><span class="keyword">if</span> (req.<span class="property">headers</span>[<span class="string">&quot;x-csrf-token&quot;</span>] !== req.<span class="property">cookies</span>.<span class="property">csrfToken</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;验证失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、实战防御组合拳"><a href="#三、实战防御组合拳" class="headerlink" title="三、实战防御组合拳"></a>三、实战防御组合拳</h2><h3 id="推荐防御策略"><a href="#推荐防御策略" class="headerlink" title="推荐防御策略"></a>推荐防御策略</h3><h4 id="1-XSS-综合防御"><a href="#1-XSS-综合防御" class="headerlink" title="1. XSS 综合防御"></a>1. XSS 综合防御</h4><ul>
<li>输入校验 + 输出转义 + CSP 策略 + HttpOnly</li>
</ul>
<h4 id="2-CSRF-黄金组合"><a href="#2-CSRF-黄金组合" class="headerlink" title="2. CSRF 黄金组合"></a>2. CSRF 黄金组合</h4><ul>
<li>CSRF Token + SameSite Cookie</li>
</ul>
<h3 id="现代框架最佳实践"><a href="#现代框架最佳实践" class="headerlink" title="现代框架最佳实践"></a>现代框架最佳实践</h3><ol>
<li>React 项目配置 CSP</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; </span></span></span><br><span class="line"><span class="string"><span class="tag">               script-src &#x27;self&#x27; &#x27;unsafe-eval&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="tag">               style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;;</span></span></span><br><span class="line"><span class="string"><span class="tag">               img-src https://*;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Express 中间件配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> csrf = <span class="built_in">require</span>(<span class="string">&quot;csurf&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">csrf</span>(&#123; <span class="attr">cookie</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取CSRF Token</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/csrf-token&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">csrfToken</span>: req.<span class="title function_">csrfToken</span>() &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="渗透测试工具推荐"><a href="#渗透测试工具推荐" class="headerlink" title="渗透测试工具推荐"></a>渗透测试工具推荐</h3><ol>
<li>使用 OWASP ZAP 自动扫描漏洞</li>
<li>通过 Postman 手动测试 API 接口</li>
<li>利用 Burp Suite 进行高级安全测试</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[用户访问恶意网站] --&gt; B[触发隐藏请求]</span><br><span class="line">    B --&gt; C[携带合法Cookie]</span><br><span class="line">    C --&gt; D[服务端执行危险操作]</span><br><span class="line">    D --&gt; E[攻击完成]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>防御措施实施后，建议定期使用自动化工具进行安全扫描，并建立漏洞响应机制。安全防护需要持&gt; 续维护，而非一劳永逸！</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Web安全</tag>
        <tag>XSS与CSRF攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全必修课-同源策略&amp;cookie访问机制</title>
    <url>/2022/07/09/Web%E5%AE%89%E5%85%A8%E5%BF%85%E4%BF%AE%E8%AF%BE-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5&amp;cookie%E8%AE%BF%E9%97%AE%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一、为什么要采用同源策略"><a href="#一、为什么要采用同源策略" class="headerlink" title="一、为什么要采用同源策略"></a>一、为什么要采用同源策略</h2><p><strong>浏览器同源策略(Same-Origin Policy)是浏览器最核心的安全机制之一，用于限制不同源的文档或脚本如何相互交互。</strong></p>
<h3 id="1-同源定义："><a href="#1-同源定义：" class="headerlink" title="1. 同源定义："></a>1. 同源定义：</h3><ul>
<li>两个 URL 的协议(protocol)、主机(host)和端口(port)完全相同才属于同源</li>
<li>例如：</li>
<li><a href="http://example.com/a.html">http://example.com/a.html</a> 和 <a href="http://example.com/b.html">http://example.com/b.html</a> → 同源</li>
<li><a href="http://example.com/">http://example.com</a> 和 <a href="https://example.com/">https://example.com</a> → 不同源(协议不同)</li>
<li><a href="http://example.com/">http://example.com</a> 和 <a href="http://sub.example.com/">http://sub.example.com</a> → 不同源(主机不同)</li>
<li><a href="http://example.com/">http://example.com:80</a> 和 <a href="http://example.com:8080/">http://example.com:8080</a> → 不同源(端口不同)</li>
</ul>
<h3 id="2-限制范围："><a href="#2-限制范围：" class="headerlink" title="2. 限制范围："></a>2. 限制范围：</h3><ul>
<li>DOM 访问：禁止跨源读取 DOM（iframe 内容、window.open 打开的窗口）</li>
<li>数据请求：限制 XMLHttpRequest&#x2F;fetch 跨源请求</li>
<li>Cookie&#x2F;LocalStorage：限制跨源访问</li>
<li>Web Workers：部分限制</li>
</ul>
<h3 id="3-常见场景-："><a href="#3-常见场景-：" class="headerlink" title="3.常见场景 ："></a>3.常见场景 ：</h3><ul>
<li>localhost:3000 和 localhost:5000 ：<ul>
<li>虽然都是 localhost，但端口不同 → 不同源 ，默认不共享 cookie</li>
</ul>
</li>
<li>子域名之间：<ul>
<li>a.example.com 和 b.example.com → 不同源</li>
</ul>
</li>
</ul>
<h3 id="4-解决方案："><a href="#4-解决方案：" class="headerlink" title="4. 解决方案："></a>4. 解决方案：</h3><ul>
<li><p>CORS(跨源资源共享)：服务器设置 Access-Control-Allow-Origin 响应头</p>
</li>
<li><p>postMessage：跨文档通信 API</p>
</li>
<li><p>代理服务器：同源服务器转发请求</p>
</li>
<li><p>修改 document.domain(仅限子域名间)</p>
</li>
<li><p>对于 cookie：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置domain为父域名可使子域名共享cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;name=value; domain=.example.com; path=/&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-特殊说明-："><a href="#5-特殊说明-：" class="headerlink" title="5. 特殊说明 ："></a>5. 特殊说明 ：</h3><ul>
<li>某些操作不受同源策略限制：<ul>
<li>跨源资源嵌入： <code>&lt;img&gt; , &lt;script&gt; , &lt;link&gt; , &lt;iframe&gt;</code>s 等标签</li>
<li>跨源写操作：表单提交、重定向</li>
</ul>
</li>
</ul>
<p><strong>同源策略是保护用户隐私和数据安全的重要机制，理解它对 Web 开发至关重要。</strong></p>
<hr>
<h2 id="二、cookie-访问机制"><a href="#二、cookie-访问机制" class="headerlink" title="二、cookie 访问机制"></a>二、cookie 访问机制</h2><p><strong>Cookie 的访问机制涉及多个方面，以下是关键机制说明：</strong></p>
<h3 id="1-存储机制-："><a href="#1-存储机制-：" class="headerlink" title="1. 存储机制 ："></a>1. 存储机制 ：</h3><ul>
<li>浏览器收到服务器响应头中的 Set-Cookie 时会存储 cookie</li>
<li>存储位置：浏览器分配的专门 cookie 存储区域</li>
<li>存储格式：键值对，附带属性（如 Domain、Path 等）</li>
</ul>
<h3 id="2-发送机制-："><a href="#2-发送机制-：" class="headerlink" title="2. 发送机制 ："></a>2. 发送机制 ：</h3><ul>
<li>符合以下条件时浏览器会自动在请求头中携带 cookie：<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>name=value; name2=value2</span><br></pre></td></tr></table></figure></li>
<li>匹配规则：<ul>
<li>Domain 匹配：cookie 的 domain 必须是当前域或其父域</li>
<li>Path 匹配：cookie 的 path 必须是请求路径的前缀</li>
<li>安全要求：Secure cookie 仅通过 HTTPS 发送</li>
</ul>
</li>
</ul>
<h3 id="3-访问控制-："><a href="#3-访问控制-：" class="headerlink" title="3. 访问控制 ："></a>3. 访问控制 ：</h3><ul>
<li><p>前端访问：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取所有可访问cookie（不含HttpOnly）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>; <span class="comment">// 返回&quot;name=value; name2=value2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入cookie（不能设置HttpOnly/Secure）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;name=new_value; path=/; max-age=3600&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务端访问：通过请求头直接读取完整 cookie</p>
</li>
</ul>
<h3 id="4-安全限制-："><a href="#4-安全限制-：" class="headerlink" title="4. 安全限制 ："></a>4. 安全限制 ：</h3><ul>
<li>HttpOnly：禁止 JavaScript 访问（防 XSS）</li>
<li>Secure：仅限 HTTPS 传输</li>
<li>SameSite：<ul>
<li>Strict：完全禁止跨站发送</li>
<li>Lax：允许安全方法(GET)的跨站发送</li>
<li>None：允许跨站发送（需配合 Secure）</li>
</ul>
</li>
</ul>
<h3 id="5-跨域规则-："><a href="#5-跨域规则-：" class="headerlink" title="5. 跨域规则 ："></a>5. 跨域规则 ：</h3><ul>
<li>默认情况下，不同协议&#x2F;端口&#x2F;域名的 cookie 隔离</li>
<li>例外情况：<ul>
<li>显式设置 Domain 为父域： .example.com 可被子域共享</li>
<li>现代浏览器默认不隔离端口（如 localhost:3000 和 localhost:5000）</li>
</ul>
</li>
</ul>
<h3 id="6-自动管理-："><a href="#6-自动管理-：" class="headerlink" title="6. 自动管理 ："></a>6. 自动管理 ：</h3><ul>
<li>过期自动删除（Expires&#x2F;Max-Age）</li>
<li>超出数量&#x2F;大小时按 LRU 策略清理</li>
<li>会话 cookie 在关闭浏览器时清除</li>
</ul>
<p>补充说明：<strong>你代码注释中提到的 Secure 和 HttpOnly 属性确实是控制 cookie 访问权限的关键安全机制。</strong></p>
<hr>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>详细解释 Cookie 的隔离机制和例外情况：</p>
<h4 id="1-默认隔离规则-："><a href="#1-默认隔离规则-：" class="headerlink" title="1. 默认隔离规则 ："></a>1. 默认隔离规则 ：</h4><ul>
<li>协议隔离： http:&#x2F;&#x2F; 和 https:&#x2F;&#x2F; 的 cookie 默认隔离</li>
<li>端口隔离：理论上不同端口 cookie 应隔离，但浏览器实现有差异</li>
<li>域名隔离： a.com 和 b.com 完全隔离， sub.a.com 和 a.com 也默认隔离</li>
</ul>
<h4 id="2-端口隔离的特殊性-："><a href="#2-端口隔离的特殊性-：" class="headerlink" title="2. 端口隔离的特殊性 ："></a>2. 端口隔离的特殊性 ：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// localhost:3000 和 localhost:5000 的cookie共享情况：</span></span><br><span class="line"><span class="comment">// 1. 规范要求隔离，但现代浏览器(Chrome/Firefox)默认不隔离</span></span><br><span class="line"><span class="comment">// 2. 可通过显式设置端口强制隔离：</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;name=value; port=3000&quot;</span>; <span class="comment">// 非标准属性，部分浏览器支持</span></span><br></pre></td></tr></table></figure>

<h4 id="3-Domain-属性的作用-："><a href="#3-Domain-属性的作用-：" class="headerlink" title="3. Domain 属性的作用 ："></a>3. Domain 属性的作用 ：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置父域cookie（可被子域共享）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;cross_sub=val; domain=.example.com; path=/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子域能读取父域cookie，反之不行</span></span><br><span class="line"><span class="comment">// a.example.com 可读取 .example.com 的cookie</span></span><br><span class="line"><span class="comment">// example.com 不能读取 a.example.com 的cookie</span></span><br></pre></td></tr></table></figure>

<h4 id="4-协议隔离的例外-："><a href="#4-协议隔离的例外-：" class="headerlink" title="4. 协议隔离的例外 ："></a>4. 协议隔离的例外 ：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当设置Secure属性时，cookie会被https协议独占</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;secure_cookie=val; Secure&quot;</span>; <span class="comment">// 仅HTTPS可用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有Secure属性的https cookie可能会被http访问（不安全）</span></span><br></pre></td></tr></table></figure>

<h4 id="5-现代浏览器行为-："><a href="#5-现代浏览器行为-：" class="headerlink" title="5. 现代浏览器行为 ："></a>5. 现代浏览器行为 ：</h4><ul>
<li><p>Chrome&#x2F;Firefox：默认允许同域名不同端口共享 cookie</p>
</li>
<li><p>Safari：较严格，部分版本会隔离端口</p>
</li>
<li><p>可通过 SameSite 属性进一步控制：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完全禁止跨站发送（包括子域）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;strict_cookie=val; SameSite=Strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许安全跨站（GET请求）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;lax_cookie=val; SameSite=Lax&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-实际开发建议-："><a href="#6-实际开发建议-：" class="headerlink" title="6. 实际开发建议 ："></a>6. 实际开发建议 ：</h4><ul>
<li>明确设置 Domain 属性避免歧义</li>
<li>重要 cookie 始终添加 Secure 和 HttpOnly</li>
<li>跨域场景使用 SameSite+Lax 平衡安全与功能</li>
<li>测试不同浏览器的 cookie 行为差异</li>
</ul>
<p><strong>特别注意：虽然现代浏览器默认不隔离端口，但这是非标准行为，不应依赖此特性实现核心功能。</strong></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Web安全</tag>
        <tag>同源策略</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全必修课-跨域知多少</title>
    <url>/2022/07/07/Web%E5%AE%89%E5%85%A8%E5%BF%85%E4%BF%AE%E8%AF%BE-%E8%B7%A8%E5%9F%9F%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
    <content><![CDATA[<h2 id="一、跨域问题的背景：为什么浏览器要“多管闲事”？"><a href="#一、跨域问题的背景：为什么浏览器要“多管闲事”？" class="headerlink" title="一、跨域问题的背景：为什么浏览器要“多管闲事”？"></a>一、跨域问题的背景：为什么浏览器要“多管闲事”？</h2><p>假设你正在开发一个天气预报网站，前端页面部署在 <a href="https://weather.com,需要从/">https://weather.com，需要从</a> <a href="https://api.weather.gov/">https://api.weather.gov</a> 获取天气数据。当你用 JavaScript 发起请求时，浏览器会直接报错：<br>Access to XMLHttpRequest has been blocked by CORS policy<br>这就是经典的跨域问题。</p>
<h3 id="1-1-浏览器为什么要限制跨域？"><a href="#1-1-浏览器为什么要限制跨域？" class="headerlink" title="1.1 浏览器为什么要限制跨域？"></a>1.1 浏览器为什么要限制跨域？</h3><p>浏览器的核心安全策略——**同源策略（Same-Origin Policy）**规定：<br>“只有协议、域名、端口完全相同的两个页面，才允许直接共享资源”。<br>比如 <a href="https://a.com/">https://a.com</a> 和 <a href="https://b.com/">https://b.com</a> 就是不同源，无法直接通过 AJAX 请求数据。</p>
<h3 id="1-2-为什么要这样设计？"><a href="#1-2-为什么要这样设计？" class="headerlink" title="1.2 为什么要这样设计？"></a>1.2 为什么要这样设计？</h3><p>假设没有同源策略，恶意网站可以随意读取你的 Gmail 邮件、窃取银行 Cookie，后果不堪设想。同源策略像一个“保安”，默认阻止跨域请求，保护用户隐私和安全。</p>
<hr>
<h2 id="二、什么是跨域？这些情况都算！"><a href="#二、什么是跨域？这些情况都算！" class="headerlink" title="二、什么是跨域？这些情况都算！"></a>二、什么是跨域？这些情况都算！</h2><p>只要以下任意一项不同，浏览器就会判定为跨域：</p>
<ul>
<li>协议不同（http vs https）</li>
<li>域名不同（a.com vs b.com）</li>
<li>端口不同（80 vs 8080）</li>
</ul>
<table>
<thead>
<tr>
<th>请求方地址</th>
<th>目标地址</th>
<th>是否跨域</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://a.com/">http://a.com</a></td>
<td><a href="https://a.com/">https://a.com</a></td>
<td>是</td>
<td>协议不同（HTTP vs HTTPS）</td>
</tr>
<tr>
<td><a href="http://a.com/">http://a.com</a></td>
<td><a href="http://b.com/">http://b.com</a></td>
<td>是</td>
<td>域名不同</td>
</tr>
<tr>
<td><a href="http://a.com/">http://a.com:80</a></td>
<td><a href="http://a.com:8080/">http://a.com:8080</a></td>
<td>是</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://a.com/api">http://a.com/api</a></td>
<td><a href="http://a.com/">http://a.com</a></td>
<td>否</td>
<td>同源</td>
</tr>
</tbody></table>
<hr>
<h2 id="三、前端如何解决跨域问题？5-种常用方案"><a href="#三、前端如何解决跨域问题？5-种常用方案" class="headerlink" title="三、前端如何解决跨域问题？5 种常用方案"></a>三、前端如何解决跨域问题？5 种常用方案</h2><h3 id="3-1-方案一：CORS（跨域资源共享）——最正统的解决方案"><a href="#3-1-方案一：CORS（跨域资源共享）——最正统的解决方案" class="headerlink" title="3.1 方案一：CORS（跨域资源共享）——最正统的解决方案"></a>3.1 方案一：CORS（跨域资源共享）——最正统的解决方案</h3><p>**核心思想：服务端设置响应头，告诉浏览器“允许哪些域访问我”。<br>适用场景：生产环境首选，需后端配合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后端示例代码（Node.js）</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;https://weather.com&quot;</span>); <span class="comment">// 允许特定域</span></span><br><span class="line"><span class="comment">// 或允许所有域（慎用）</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>CORS 两种请求类型：</p>
<ul>
<li><p>简单请求：直接发送（如 GET&#x2F;POST 且无自定义头）</p>
</li>
<li><p>预检请求：先发 OPTIONS 请求探路（如 PUT&#x2F;DELETE 或带自定义头）</p>
</li>
</ul>
<hr>
<h3 id="3-2-方案二：代理服务器——开发环境神器"><a href="#3-2-方案二：代理服务器——开发环境神器" class="headerlink" title="3.2 方案二：代理服务器——开发环境神器"></a>3.2 方案二：代理服务器——开发环境神器</h3><p><strong>核心思想：前端请求同域代理，代理转发到目标服务器，避开浏览器限制。</strong></p>
<p>实现方式：</p>
<ol>
<li>Webpack DevServer 代理（Vue&#x2F;React 项目常用，开发环境时使用）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;https://api.weather.gov&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span> &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Nginx 反向代理（生产环境部署）</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /api/ &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> https://api.weather.gov/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-3-方案三：JSONP——老式技巧的巧妙利用"><a href="#3-3-方案三：JSONP——老式技巧的巧妙利用" class="headerlink" title="3.3 方案三：JSONP——老式技巧的巧妙利用"></a>3.3 方案三：JSONP——老式技巧的巧妙利用</h3><p><strong>核心思想：利用 <code>&lt;script&gt;</code> 标签无跨域限制的特性。</strong><br><strong>缺点：仅支持 GET 请求，安全性低（需完全信任服务端）。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleWeather</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到数据:&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">script.<span class="property">src</span> = <span class="string">&quot;https://api.weather.gov?callback=handleWeather&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端需返回：handleWeather(&#123; temperature: 25 &#125;);</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-4-方案四：WebSocket——双向通信无跨域"><a href="#3-4-方案四：WebSocket——双向通信无跨域" class="headerlink" title="3.4 方案四：WebSocket——双向通信无跨域"></a>3.4 方案四：WebSocket——双向通信无跨域</h3><p><strong>WebSocket 协议不受同源策略限制，适合实时通信场景。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;wss://api.weather.gov&quot;</span>);</span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息:&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-5-方案五：临时解决方案（仅测试用）"><a href="#3-5-方案五：临时解决方案（仅测试用）" class="headerlink" title="3.5 方案五：临时解决方案（仅测试用）"></a>3.5 方案五：临时解决方案（仅测试用）</h3><p><strong>禁用浏览器安全策略（Chrome 启动参数加 –disable-web-security）</strong><br>⚠️ <strong>警告：仅限本地调试，绝对不要用于日常浏览！</strong></p>
<hr>
<h2 id="四、如何选择最佳方案？"><a href="#四、如何选择最佳方案？" class="headerlink" title="四、如何选择最佳方案？"></a>四、如何选择最佳方案？</h2><table>
<thead>
<tr>
<th>方案</th>
<th>适用场景</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>CORS</td>
<td>生产环境</td>
<td>安全、标准</td>
<td>需后端配合</td>
</tr>
<tr>
<td>代理服务器</td>
<td>开发环境</td>
<td>前端独立解决</td>
<td>需配置服务器</td>
</tr>
<tr>
<td>JSONP</td>
<td>旧项目兼容</td>
<td>无需后端改动</td>
<td>仅 GET、安全性低</td>
</tr>
<tr>
<td>WebSocket</td>
<td>实时通信（如聊天室）</td>
<td>双向通信、高效</td>
<td>复杂度较高</td>
</tr>
</tbody></table>
<hr>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul>
<li><strong>优先选择 CORS</strong>：作为标准方案，安全可靠。</li>
<li><strong>开发环境用代理</strong>：能够避免修改生产代码。</li>
<li><strong>谨慎使用 JSONP</strong>：仅作为兼容旧系统的备用方案。</li>
</ul>
<p>跨域问题本质上是浏览器与服务器之间的“信任协议”，理解其原理后，选择合适的方案即可轻松应对！</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Web安全</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全必修课-Cookie的食用指南 🍪</title>
    <url>/2022/07/06/Web%E5%AE%89%E5%85%A8%E5%BF%85%E4%BF%AE%E8%AF%BE-cookie%E7%9A%84%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="一、Cookie-是什么？超市储物柜的即视感"><a href="#一、Cookie-是什么？超市储物柜的即视感" class="headerlink" title="一、Cookie 是什么？超市储物柜的即视感"></a>一、Cookie 是什么？超市储物柜的即视感</h2><p>想象你第一次去超市购物，服务员给了你一张<strong>小票（Cookie）</strong>。之后每次去超市，只要出示这张小票就能直接打开自己的储物柜。Cookie 就是浏览器帮我们记住这些”储物柜小票”的技术。</p>
<hr>
<h2 id="二、Cookie-的原料配方表"><a href="#二、Cookie-的原料配方表" class="headerlink" title="二、Cookie 的原料配方表"></a>二、Cookie 的原料配方表</h2><p>每个 Cookie 都包含这些核心配料：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=JohnDoe;</span></span><br><span class="line"><span class="string">                  expires=Fri, 31 Dec 2023 23:59:59 GMT;</span></span><br><span class="line"><span class="string">                  path=/;</span></span><br><span class="line"><span class="string">                  domain=.example.com;</span></span><br><span class="line"><span class="string">                  Secure;</span></span><br><span class="line"><span class="string">                  HttpOnly;</span></span><br><span class="line"><span class="string">                  SameSite=Lax&quot;</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>配料名</th>
<th>作用说明</th>
<th>类比解释</th>
</tr>
</thead>
<tbody><tr>
<td>key&#x3D;value</td>
<td>存储的键值对</td>
<td>储物柜编号+存放物品</td>
</tr>
<tr>
<td>Expires</td>
<td>过期时间（日期格式）</td>
<td>小票有效期</td>
</tr>
<tr>
<td>Max-Age</td>
<td>存活秒数（优先级更高）</td>
<td>倒计时自毁装置</td>
</tr>
<tr>
<td>Domain</td>
<td>生效域名</td>
<td>连锁超市分店通用券</td>
</tr>
<tr>
<td>Path</td>
<td>URL 路径限制</td>
<td>仅限二楼储物区使用</td>
</tr>
<tr>
<td>Secure</td>
<td>仅 HTTPS 传输</td>
<td>防窃听加密传输</td>
</tr>
<tr>
<td>HttpOnly</td>
<td>禁止 JS 访问</td>
<td>储物柜管理员专属钥匙</td>
</tr>
<tr>
<td>SameSite</td>
<td>跨站发送限制</td>
<td>防止其他商店冒领的安检</td>
</tr>
</tbody></table>
<hr>
<h2 id="三、前端厨房实操手册"><a href="#三、前端厨房实操手册" class="headerlink" title="三、前端厨房实操手册"></a>三、前端厨房实操手册</h2><h3 id="3-1-烤制新鲜-Cookie"><a href="#3-1-烤制新鲜-Cookie" class="headerlink" title="3.1 烤制新鲜 Cookie"></a>3.1 烤制新鲜 Cookie</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础款曲奇</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;theme=dark&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 豪华定制版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bakeCookie</span>(<span class="params">name, value, days</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  date.<span class="title function_">setTime</span>(date.<span class="title function_">getTime</span>() + days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;value&#125;</span>; </span></span><br><span class="line"><span class="string">                    expires=<span class="subst">$&#123;date.toUTCString()&#125;</span>; </span></span><br><span class="line"><span class="string">                    path=/`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现烤一个7天过期的饼干</span></span><br><span class="line"><span class="title function_">bakeCookie</span>(<span class="string">&quot;user_token&quot;</span>, <span class="string">&quot;abc123&quot;</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-2-品尝-Cookie-的味道"><a href="#3-2-品尝-Cookie-的味道" class="headerlink" title="3.2 品尝 Cookie 的味道"></a>3.2 品尝 Cookie 的味道</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取整盒饼干</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line"><span class="comment">// 输出：&quot;theme=dark; user_token=abc123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出特定饼干</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line">    .<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>)</span><br><span class="line">    .<span class="title function_">find</span>(<span class="function">(<span class="params">row</span>) =&gt;</span> row.<span class="title function_">startsWith</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span>=`</span>))</span><br><span class="line">    ?.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getCookie</span>(<span class="string">&quot;theme&quot;</span>)); <span class="comment">// 输出：dark</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-处理过期饼干"><a href="#3-3-处理过期饼干" class="headerlink" title="3.3 处理过期饼干"></a>3.3 处理过期饼干</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 让饼干立即过期</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;user_token=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、食用安全须知-⚠️"><a href="#四、食用安全须知-⚠️" class="headerlink" title="四、食用安全须知 ⚠️"></a>四、食用安全须知 ⚠️</h2><ol>
<li><p>容量警报</p>
<ul>
<li>单个 Cookie ≤ 4KB</li>
<li>单域名 ≤ 20 个 Cookie（各浏览器不同）</li>
</ul>
</li>
<li><p>XSS 防御<br>敏感 Cookie 务必添加 HttpOnly 属性，就像把贵重物品锁进保险柜</p>
</li>
<li><p>CSRF 防护<br>使用 SameSite&#x3D;Strict&#x2F;Lax，相当于给储物柜加指纹锁</p>
</li>
<li><p>敏感信息禁区 s<br>❌ 永远不要在 Cookie 中存储：</p>
<ul>
<li>用户密码</li>
<li>信用卡号</li>
<li>JWT 令牌的裸奔版本</li>
</ul>
</li>
</ol>
<hr>
<h2 id="五、什么时候该换零食？🍪-↔️-🥡"><a href="#五、什么时候该换零食？🍪-↔️-🥡" class="headerlink" title="五、什么时候该换零食？🍪 ↔️ 🥡"></a>五、什么时候该换零食？🍪 ↔️ 🥡</h2><table>
<thead>
<tr>
<th>场景</th>
<th>Cookie</th>
<th>Web Storage</th>
</tr>
</thead>
<tbody><tr>
<td>需要自动过期</td>
<td>✅ 原生支持</td>
<td>❌ 需手动清除</td>
</tr>
<tr>
<td>需要服务端读取</td>
<td>✅ 自动携带</td>
<td>❌ 需主动发送</td>
</tr>
<tr>
<td>存储大量数据</td>
<td>❌ 容量小</td>
<td>✅ 5MB+</td>
</tr>
<tr>
<td>敏感操作验证</td>
<td>✅ HttpOnly 防护</td>
<td>❌ 暴露在 JS 环境</td>
</tr>
</tbody></table>
<hr>
<h2 id="六、最佳食用姿势-✨"><a href="#六、最佳食用姿势-✨" class="headerlink" title="六、最佳食用姿势 ✨"></a>六、最佳食用姿势 ✨</h2><ul>
<li>给 Cookie 穿上 HTTPS 的防弹衣（Secure 属性）</li>
<li>像对待密码一样设置 HttpOnly</li>
<li>使用编码处理特殊字符：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">&quot;user=张三&amp;age=20&quot;</span>);</span><br><span class="line"><span class="comment">// → &quot;user%3D%E5%BC%A0%E4%B8%89%26age%3D20&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>定期检查 Cookie 的有效期，就像查看食品保质期</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Web安全</tag>
        <tag>cookie的食用指南</tag>
      </tags>
  </entry>
  <entry>
    <title>css那些事</title>
    <url>/2022/07/03/css%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h2 id="display-inline-block-和-block、inline-的区别"><a href="#display-inline-block-和-block、inline-的区别" class="headerlink" title="display inline-block 和 block、inline 的区别"></a>display inline-block 和 block、inline 的区别</h2><h2 id="display-属性对比表"><a href="#display-属性对比表" class="headerlink" title="display 属性对比表"></a>display 属性对比表</h2><table>
<thead>
<tr>
<th>特性</th>
<th><code>display: block</code></th>
<th><code>display: inline</code></th>
<th><code>display: inline-block</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong>显示方式</strong></td>
<td>独占一行</td>
<td>行内显示</td>
<td>行内显示</td>
</tr>
<tr>
<td><strong>宽高设置</strong></td>
<td>✅ 可设置</td>
<td>❌ 不可设置</td>
<td>✅ 可设置</td>
</tr>
<tr>
<td><strong>边距影响</strong></td>
<td>完全生效</td>
<td>水平方向生效，垂直方向部分生效</td>
<td>完全生效（可能导致布局问题）</td>
</tr>
<tr>
<td><strong>包含元素</strong></td>
<td>块级和行内元素</td>
<td>只能包含行内元素</td>
<td>块级和行内元素</td>
</tr>
<tr>
<td><strong>默认宽度</strong></td>
<td>父容器 100%</td>
<td>由内容决定</td>
<td>由内容决定</td>
</tr>
<tr>
<td><strong>典型元素</strong></td>
<td><code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code></td>
<td><code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code></td>
<td><code>&lt;img&gt;</code>等替换元素</td>
</tr>
<tr>
<td><strong>布局场景</strong></td>
<td>整体布局结构</td>
<td>文本修饰、行内元素</td>
<td>需要控制尺寸的行内元素</td>
</tr>
<tr>
<td><strong>注意事项</strong></td>
<td>-</td>
<td>-</td>
<td>需处理<code>inline-block</code>间隙问题</td>
</tr>
</tbody></table>
<h3 id="间隙问题解决方案"><a href="#间隙问题解决方案" class="headerlink" title="间隙问题解决方案"></a>间隙问题解决方案</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/* 消除间隙 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 重置字体大小 */</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: top; <span class="comment">/* 顶部对齐 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS-盒模型详解"><a href="#CSS-盒模型详解" class="headerlink" title="CSS 盒模型详解"></a>CSS 盒模型详解</h2><p>CSS 盒模型（Box Model）是网页布局的基础，定义了元素在页面中占据的空间。一个盒子由以下四部分组成：</p>
<h3 id="1-内容区（Content）"><a href="#1-内容区（Content）" class="headerlink" title="1. 内容区（Content）"></a>1. 内容区（Content）</h3><ul>
<li>显示文本、图片等实际内容。</li>
<li>大小由 <code>width</code> 和 <code>height</code> 控制。</li>
</ul>
<h3 id="2-内边距（Padding）"><a href="#2-内边距（Padding）" class="headerlink" title="2. 内边距（Padding）"></a>2. 内边距（Padding）</h3><ul>
<li>内容与边框之间的透明区域。</li>
<li>通过 <code>padding-top</code>、<code>padding-right</code> 等属性设置。</li>
</ul>
<h3 id="3-边框（Border）"><a href="#3-边框（Border）" class="headerlink" title="3. 边框（Border）"></a>3. 边框（Border）</h3><ul>
<li>围绕内容和内边距的边界线。</li>
<li>通过 <code>border-width</code>、<code>border-style</code> 等属性设置。</li>
</ul>
<h3 id="4-外边距（Margin）"><a href="#4-外边距（Margin）" class="headerlink" title="4. 外边距（Margin）"></a>4. 外边距（Margin）</h3><ul>
<li>盒子与其他元素之间的透明区域。</li>
<li>通过 <code>margin-top</code>、<code>margin-right</code> 等属性设置。</li>
</ul>
<hr>
<h3 id="标准盒模型-vs-怪异盒模型"><a href="#标准盒模型-vs-怪异盒模型" class="headerlink" title="标准盒模型 vs 怪异盒模型"></a>标准盒模型 vs 怪异盒模型</h3><ul>
<li><p><strong>标准盒模型（<code>box-sizing: content-box</code>）</strong></p>
<ul>
<li><code>width</code> 和 <code>height</code> 仅控制内容区大小。</li>
<li>总宽度 &#x3D; <code>width</code> + <code>padding</code> + <code>border</code> + <code>margin</code>。</li>
</ul>
</li>
<li><p><strong>怪异盒模型（<code>box-sizing: border-box</code>）</strong></p>
<ul>
<li><code>width</code> 和 <code>height</code> 包含内容、内边距和边框。</li>
<li>总宽度 &#x3D; <code>width</code>（含 <code>padding</code> 和 <code>border</code>） + <code>margin</code>。</li>
<li>推荐使用：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h2 id="BFC（块级格式化上下文）详解"><a href="#BFC（块级格式化上下文）详解" class="headerlink" title="BFC（块级格式化上下文）详解"></a>BFC（块级格式化上下文）详解</h2><p>BFC（Block Formatting Context）是 CSS 渲染的一块独立区域，内部元素不会影响外部布局。</p>
<h3 id="触发-BFC-的条件"><a href="#触发-BFC-的条件" class="headerlink" title="触发 BFC 的条件"></a>触发 BFC 的条件</h3><p>以下属性可以触发 BFC：</p>
<ul>
<li><code>float: left/right</code>（不为 <code>none</code>）</li>
<li><code>position: absolute/fixed</code></li>
<li><code>display: inline-block/table-cell/flex</code></li>
<li><code>overflow: hidden/auto/scroll</code>（不为 <code>visible</code>）</li>
</ul>
<hr>
<h3 id="BFC-的特性"><a href="#BFC-的特性" class="headerlink" title="BFC 的特性"></a>BFC 的特性</h3><ol>
<li><strong>阻止外边距重叠（Margin Collapse）</strong></li>
</ol>
<ul>
<li>普通流中相邻垂直外边距会合并（取最大值）。</li>
<li>BFC 内的元素与外部元素不会发生外边距重叠。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bfc&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>包含浮动元素</li>
</ol>
<ul>
<li>父元素未设置高度时，子元素浮动会导致父元素高度塌陷。<a href="https://www.yuque.com/frontend-onhmj/wang/xt7qd1">如何解决浮动塌陷</a></li>
<li>触发 BFC 后，父元素会包裹浮动子元素。<a href="https://www.yuque.com/frontend-onhmj/wang/zqrevr">如何清除浮动</a></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125; <span class="comment">/* 触发 BFC */</span></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>阻止元素被浮动覆盖</li>
</ol>
<ul>
<li>BFC 区域不会与浮动元素重叠。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left; width: 100px;&quot;</span>&gt;</span>浮动元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span>BFC 元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="盒模型-BFC-总结"><a href="#盒模型-BFC-总结" class="headerlink" title="盒模型&amp;BFC 总结"></a>盒模型&amp;BFC 总结</h2><table>
<thead>
<tr>
<th>特性</th>
<th>盒模型</th>
<th>BFC</th>
</tr>
</thead>
<tbody><tr>
<td>作用</td>
<td>定义元素空间占用</td>
<td>创建独立布局环境</td>
</tr>
<tr>
<td>核心问题</td>
<td>计算实际宽高</td>
<td>解决外边距重叠、浮动塌陷等问题</td>
</tr>
<tr>
<td>常用属性</td>
<td><code>width</code>, <code>padding</code>, <code>border</code></td>
<td><code>overflow</code>, <code>float</code>, <code>position</code></td>
</tr>
</tbody></table>
<h2 id="CSS-经典布局"><a href="#CSS-经典布局" class="headerlink" title="CSS 经典布局"></a>CSS 经典布局</h2><h3 id="布局选择建议"><a href="#布局选择建议" class="headerlink" title="布局选择建议"></a>布局选择建议</h3><ol>
<li>简单布局 ：优先使用 Flexbox</li>
<li>二维复杂布局 ：使用 CSS Grid</li>
<li>传统布局 ：Float + Clearfix（兼容旧浏览器）</li>
<li>特殊场景 ：<ul>
<li>瀑布流： column-count 或 JS 实现</li>
<li>粘性元素： position: sticky</li>
<li>响应式：配合媒体查询使用</li>
</ul>
</li>
</ol>
<h3 id="1-居中布局-水平-垂直"><a href="#1-居中布局-水平-垂直" class="headerlink" title="1. 居中布局 (水平+垂直)"></a>1. 居中布局 (水平+垂直)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 方法1：Flexbox */</span></span><br><span class="line"><span class="selector-class">.center-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法2：绝对定位 */</span></span><br><span class="line"><span class="selector-class">.center-absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法3：Grid */</span></span><br><span class="line"><span class="selector-class">.center-grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">place-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-两栏-三栏布局"><a href="#2-两栏-三栏布局" class="headerlink" title="2. 两栏&#x2F;三栏布局"></a>2. 两栏&#x2F;三栏布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 两栏布局（左侧固定，右侧自适应） */</span></span><br><span class="line"><span class="selector-class">.two-columns</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   * flex-shrink属性用于定义项目的缩小比例。</span></span><br><span class="line"><span class="comment">   * 默认值为1，即如果空间不足，项目将等比例缩小。</span></span><br><span class="line"><span class="comment">   * 设置为0表示项目不缩小，保持原始尺寸。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   * flex-grow属性定义了项目的放大比例，默认值为0，即如果存在剩余空间，也不放大。</span></span><br><span class="line"><span class="comment">   * 设置为1表示如果存在剩余空间，该项目将等比例地占据剩余空间。</span></span><br><span class="line"><span class="comment">   * 这个属性用于flex布局中，是flex子项的一个属性。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 三栏布局（圣杯布局） */</span></span><br><span class="line"><span class="selector-class">.three-columns</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-瀑布流布局-css3-语法"><a href="#3-瀑布流布局-css3-语法" class="headerlink" title="3. 瀑布流布局 (css3 语法)"></a>3. 瀑布流布局 (css3 语法)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* 定义列布局 */</span></span><br><span class="line">  <span class="attribute">columns</span>: <span class="number">4</span> <span class="number">200px</span>; // 设置列数为<span class="number">4</span>，每列宽度为<span class="number">200px</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 定义列间距 */</span></span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">1rem</span>; // 设置列与列之间的间距为<span class="number">1rem</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">/* 设置元素在分页、分栏或分块时避免被中断 */</span></span><br><span class="line">  <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">  <span class="comment">/* 设置元素底部的外边距为1rem */</span></span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-等分布局"><a href="#4-等分布局" class="headerlink" title="4. 等分布局"></a>4. 等分布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Flex 实现 */</span></span><br><span class="line"><span class="selector-class">.equal-flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.equal-flex</span> &gt; * &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Grid 实现 */</span></span><br><span class="line"><span class="selector-class">.equal-grid</span> &#123;</span><br><span class="line">  <span class="comment">/* 使用CSS Grid布局 */</span></span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 定义网格列的模板 */</span></span><br><span class="line">  <span class="comment">/* repeat(auto-fit, minmax(100px, 1fr)) 的含义是：</span></span><br><span class="line"><span class="comment">     - auto-fit：自动填充列，尽可能多地填充可用空间</span></span><br><span class="line"><span class="comment">     - minmax(100px, 1fr)：每个列的最小宽度为100px，最大宽度为1fr（即剩余空间的等分）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-粘性页脚布局"><a href="#5-粘性页脚布局" class="headerlink" title="5. 粘性页脚布局"></a>5. 粘性页脚布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="comment">/* 使用Flex布局 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 设置主轴方向为垂直方向，即子元素按从上到下的顺序排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-全屏布局"><a href="#6-全屏布局" class="headerlink" title="6. 全屏布局"></a>6. 全屏布局</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fullscreen</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  // 设置元素的宽度为视口宽度的<span class="number">100%</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  // 设置元素的高度为视口高度的<span class="number">100%</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css预编译器</title>
    <url>/2022/03/30/css%E9%A2%84%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h3 id="1-Sass-Syntactically-Awesome-Style-Sheets"><a href="#1-Sass-Syntactically-Awesome-Style-Sheets" class="headerlink" title="1. Sass (Syntactically Awesome Style Sheets)"></a>1. Sass (Syntactically Awesome Style Sheets)</h3><p><strong>特点：</strong></p>
<ul>
<li>最成熟的 CSS 预处理器</li>
<li>提供两种语法格式：<ul>
<li><code>.scss</code> (Sassy CSS) - 兼容 CSS 语法</li>
<li><code>.sass</code> - 缩进语法（不使用大括号和分号）</li>
</ul>
</li>
<li>需要 Ruby 环境（LibSass 版本不需要）</li>
</ul>
<p><strong>核心功能：</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mixin</span></span><br><span class="line"><span class="keyword">@mixin</span> border-radius(<span class="variable">$radius</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .message;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Less-Leaner-Style-Sheets"><a href="#2-Less-Leaner-Style-Sheets" class="headerlink" title="2.Less (Leaner Style Sheets)"></a>2.Less (Leaner Style Sheets)</h3><p><strong>特点：</strong></p>
<ul>
<li>受 Sass 启发，语法更接近原生 CSS</li>
<li>使用 JavaScript 实现（Node.js）</li>
<li>浏览器端可直接运行（开发环境）</li>
</ul>
<p><strong>核心功能：</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="variable">@primary-color:</span> <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mixin</span></span><br><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算</span></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-Stylus"><a href="#3-Stylus" class="headerlink" title="3.Stylus"></a>3.Stylus</h3><p><strong>特点：</strong></p>
<ul>
<li>语法最灵活（可选括号、分号、冒号）</li>
<li>Node.js 实现</li>
<li>强调简洁性和表现力</li>
</ul>
<p><strong>核心功能：</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量（可省略$）</span></span><br><span class="line">primary-<span class="attribute">color</span> = <span class="selector-id">#333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套</span></span><br><span class="line"><span class="selector-tag">nav</span></span><br><span class="line">  <span class="selector-tag">ul</span></span><br><span class="line">    <span class="attribute">margin</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mixin</span></span><br><span class="line"><span class="attribute">border-radius</span>(radius)</span><br><span class="line">  <span class="attribute">border-radius</span> radius</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内置函数</span></span><br><span class="line"><span class="built_in">lighten</span>(color, <span class="number">10%</span>)</span><br></pre></td></tr></table></figure>

<h3 id="三者异同"><a href="#三者异同" class="headerlink" title="三者异同"></a>三者异同</h3><h4 id="模块化能力对比"><a href="#模块化能力对比" class="headerlink" title="模块化能力对比"></a>模块化能力对比</h4><table>
<thead>
<tr>
<th>模块化特性</th>
<th>Sass&#x2F;SCSS</th>
<th>Less</th>
<th>Stylus</th>
</tr>
</thead>
<tbody><tr>
<td><strong>基础导入</strong></td>
<td><code>@import</code> (旧版)</td>
<td><code>@import</code></td>
<td><code>@import</code></td>
</tr>
<tr>
<td><strong>现代模块系统</strong></td>
<td><code>@use</code> + <code>@forward</code> (Dart Sass)</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td><strong>命名空间</strong></td>
<td>通过<code>@use</code>引入带前缀</td>
<td>无原生支持</td>
<td>无原生支持</td>
</tr>
<tr>
<td><strong>私有成员</strong></td>
<td><code>-</code>或<code>_</code>前缀变量</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td><strong>依赖管理</strong></td>
<td>自动避免重复导入</td>
<td>需手动管理</td>
<td>需手动管理</td>
</tr>
<tr>
<td><strong>局部文件</strong></td>
<td><code>_partial.scss</code>约定</td>
<td><code>_partial.less</code>约定</td>
<td><code>_partial.styl</code>约定</td>
</tr>
<tr>
<td><strong>CSS 输出控制</strong></td>
<td><code>@forward</code>隐藏&#x2F;暴露特定成员</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td><strong>变量覆盖</strong></td>
<td><code>!default</code>标记可覆盖变量</td>
<td>后定义覆盖前定义</td>
<td>后定义覆盖前定义</td>
</tr>
<tr>
<td><strong>跨文件共享</strong></td>
<td>通过<code>@use</code>共享</td>
<td>全局自动共享</td>
<td>全局自动共享</td>
</tr>
<tr>
<td><strong>按需加载</strong></td>
<td>支持条件导入</td>
<td>全部导入</td>
<td>支持条件导入</td>
</tr>
</tbody></table>
<h4 id="典型代码示例"><a href="#典型代码示例" class="headerlink" title="典型代码示例"></a>典型代码示例</h4><p><strong>Sass 模块化 (现代方式)</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// _variables.scss</span></span><br><span class="line"><span class="variable">$primary</span>: <span class="number">#333</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&quot;variables&quot;</span> as vars;</span><br><span class="line"><span class="keyword">@use</span> <span class="string">&quot;buttons&quot;</span> with (</span><br><span class="line">  <span class="variable">$primary</span>: vars.<span class="variable">$primary</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>Less 模块化</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// variables.less</span></span><br><span class="line"><span class="variable">@primary:</span> <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;variables&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;buttons&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>Stylus 模块化</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// variables.styl</span></span><br><span class="line">primary = <span class="selector-id">#333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.styl</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;variables&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;buttons&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<ol>
<li><p>Less 中的变量，在声明中使用时，如果出现多次赋值的情况，其会取最后一次赋值的值</p>
</li>
<li><p>Sass&#x2F;Stylus 中的变量，如果出现多次赋值的情况，其会取声明前面最近的一次赋值的值</p>
</li>
</ol>
<h4 id="模块化建议："><a href="#模块化建议：" class="headerlink" title="模块化建议："></a>模块化建议：</h4><ul>
<li>需要严格隔离 → 选择 Sass 的 @use 系统</li>
<li>简单项目 → Less&#x2F;Stylus 的基础导入已足够</li>
<li>变量共享 → Sass 的命名空间最安全</li>
<li>旧项目维护 → 注意 Sass 的 @import 已被标记为废弃</li>
</ul>
<h4 id="三种-CSS-预编译器对比"><a href="#三种-CSS-预编译器对比" class="headerlink" title="三种 CSS 预编译器对比"></a>三种 CSS 预编译器对比</h4><table>
<thead>
<tr>
<th>对比维度</th>
<th>Sass&#x2F;SCSS</th>
<th>Less</th>
<th>Stylus</th>
</tr>
</thead>
<tbody><tr>
<td><strong>诞生时间</strong></td>
<td>2006 年 (最早期)</td>
<td>2009 年 (受 Sass 启发)</td>
<td>2010 年 (最新)</td>
</tr>
<tr>
<td><strong>语法风格</strong></td>
<td><code>.scss</code>兼容 CSS &#x2F; <code>.sass</code>缩进语法</td>
<td>完全兼容 CSS 语法</td>
<td>极简语法（符号可选）</td>
</tr>
<tr>
<td><strong>运行环境</strong></td>
<td>Ruby (或 LibSass 的 C 版本)</td>
<td>JavaScript (Node.js)</td>
<td>JavaScript (Node.js)</td>
</tr>
<tr>
<td><strong>变量声明</strong></td>
<td><code>$var: value;</code></td>
<td><code>@var: value;</code></td>
<td><code>var = value</code> 或 <code>var: value</code></td>
</tr>
<tr>
<td><strong>嵌套规则</strong></td>
<td>支持完整嵌套</td>
<td>支持完整嵌套</td>
<td>支持（缩进敏感）</td>
</tr>
<tr>
<td><strong>Mixin</strong></td>
<td><code>@mixin</code>定义 &#x2F; <code>@include</code>调用</td>
<td>类式混合（直接调用）</td>
<td>函数式定义</td>
</tr>
<tr>
<td><strong>继承</strong></td>
<td><code>@extend</code></td>
<td>无（通过 Mixins 模拟）</td>
<td><code>@extend</code></td>
</tr>
<tr>
<td><strong>运算能力</strong></td>
<td>支持复杂数学运算</td>
<td>基础运算</td>
<td>支持运算和内置函数</td>
</tr>
<tr>
<td><strong>条件语句</strong></td>
<td><code>@if/@else</code></td>
<td>有限支持（通过 when）</td>
<td>完整 if&#x2F;else 支持</td>
</tr>
<tr>
<td><strong>循环语句</strong></td>
<td><code>@for/@each/@while</code></td>
<td>有限循环</td>
<td>完整循环支持</td>
</tr>
<tr>
<td><strong>模块化</strong></td>
<td><code>@use</code>&#x2F;<code>@forward</code> (新版)</td>
<td><code>@import</code></td>
<td><code>@import</code></td>
</tr>
<tr>
<td><strong>错误处理</strong></td>
<td>详细错误报告</td>
<td>基础错误提示</td>
<td>相对简洁的错误提示</td>
</tr>
<tr>
<td><strong>编译速度</strong></td>
<td>较快（LibSass 版本）</td>
<td>中等</td>
<td>最快</td>
</tr>
<tr>
<td><strong>社区生态</strong></td>
<td>最庞大（Bootstrap 早期使用）</td>
<td>较大（Bootstrap v3 采用）</td>
<td>较小但活跃</td>
</tr>
<tr>
<td><strong>典型用户</strong></td>
<td>GitHub, Airbnb, Shopify</td>
<td>Bootstrap 3, 早期 React 项目</td>
<td>Vue 生态（早期 Vue-loader 集成）</td>
</tr>
</tbody></table>
<h3 id="特色功能对比"><a href="#特色功能对比" class="headerlink" title="特色功能对比"></a>特色功能对比</h3><table>
<thead>
<tr>
<th>高级功能</th>
<th>Sass</th>
<th>Less</th>
<th>Stylus</th>
</tr>
</thead>
<tbody><tr>
<td><strong>颜色函数</strong></td>
<td>提供 20+颜色操作函数</td>
<td>基础颜色混合</td>
<td>内置 lighten&#x2F;darken 等</td>
</tr>
<tr>
<td><strong>父选择器</strong></td>
<td><code>&amp;</code> 高度灵活</td>
<td><code>&amp;</code> 基本功能</td>
<td><code>&amp;</code> 支持层级引用</td>
</tr>
<tr>
<td><strong>自定义函数</strong></td>
<td><code>@function</code></td>
<td>通过插件扩展</td>
<td>内置函数式支持</td>
</tr>
<tr>
<td><strong>CSS 兼容</strong></td>
<td>完全兼容 CSS</td>
<td>完全兼容 CSS</td>
<td>需要转换语法</td>
</tr>
<tr>
<td><strong>动态导入</strong></td>
<td>支持运行时导入</td>
<td>静态导入</td>
<td>支持条件导入</td>
</tr>
<tr>
<td><strong>源码映射</strong></td>
<td>完整 sourcemap 支持</td>
<td>基础支持</td>
<td>完整支持</td>
</tr>
</tbody></table>
<blockquote>
<p>选择建议：</p>
<ul>
<li><strong>企业级项目</strong> → Sass（稳定性和功能完整性）</li>
<li><strong>前端框架集成</strong> → Less（纯 JS 实现优势）</li>
<li><strong>开发效率优先</strong> → Stylus（极简语法和快速原型）</li>
<li><strong>已有技术栈</strong> → 优先匹配现有生态</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks使用</title>
    <url>/2023/08/05/react-Hooks/</url>
    <content><![CDATA[<h2 id="useMemo、useCallback-与-React-memo-使用场景详解"><a href="#useMemo、useCallback-与-React-memo-使用场景详解" class="headerlink" title="useMemo、useCallback 与 React.memo 使用场景详解"></a><code>useMemo</code>、<code>useCallback</code> 与 <code>React.memo</code> 使用场景详解</h2><hr>
<h3 id="useMemo：缓存计算结果"><a href="#useMemo：缓存计算结果" class="headerlink" title="useMemo：缓存计算结果"></a><code>useMemo</code>：缓存计算结果</h3><p><strong>作用：</strong> 避免重复计算高开销的值，仅在依赖项变化时重新计算。<br><strong>适用场景：</strong></p>
<ol>
<li>复杂计算优化： 如过滤&#x2F;排序大型数据集、数学运算等。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">expensiveCalculation</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Calculating...更新了&quot;</span>);</span><br><span class="line">  <span class="comment">// 模拟耗时计算</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">    result += num * i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 每次渲染都会重新计算，即使number没有变化</span></span><br><span class="line">  <span class="comment">// const calculatedValue = expensiveCalculation(number);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有当number变化时才重新计算</span></span><br><span class="line">  <span class="keyword">const</span> memoizedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">expensiveCalculation</span>(number), [number]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;number&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setNumber(parseInt(e.target.value))&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">p</span>&gt;</span>Result: &#123;calculatedValue&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Result: &#123;memoizedValue&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>避免对象&#x2F;数组引用频繁变更；缓存计算结果作为 props 传递给子组件，避免子组件因引用变换而重新渲染。</p>
</li>
<li><p>动态生成 JSX：如基于数据生成负载 UI 结构时，减少渲染耗时。</p>
<ul>
<li>仅当计算开销大于缓存管理成本时才使用。</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 适用情况：</span><br><span class="line">   * 大型列表/树形结构渲染</span><br><span class="line">   * 复杂的数据转换（filter+map+reduce 组合操作）</span><br><span class="line">   * 需要深度比较的对象结构</span><br><span class="line">- 不适用情况：</span><br><span class="line">   * 简单计算（如基本数学运算）</span><br><span class="line">  * 小型列表（&lt; 100 项）</span><br><span class="line">  * 频繁变化的依赖项</span><br></pre></td></tr></table></figure>

<ul>
<li>依赖项数组需准确，否则可能导致缓存失效。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 过度优化 ：对简单JSX使用useMemo反而会增加内存开销</span><br><span class="line">- 依赖项遗漏 ：忘记添加依赖项会导致使用过期的值</span><br><span class="line">- 滥用缓存 ：对频繁变化的依赖项使用会失去优化意义</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Component</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">const</span> memoizedList = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="useCallback：缓存函数使用"><a href="#useCallback：缓存函数使用" class="headerlink" title="useCallback：缓存函数使用"></a><code>useCallback</code>：缓存函数使用</h3><p><strong>作用：</strong> 避免函数在每次渲染时重新创建，确保函数引用稳定。<br><strong>适用场景：</strong></p>
<ol>
<li>函数作为子组件 props： 结合<code>React.memo</code>避免组件因为函数引用变化而重新渲染。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildComponent</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; onClick &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ParentComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Button clicked!&quot;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>依赖其他 hooks 的函数： 如<code>useEffect</code>依赖的函数需稳定引用。</li>
<li>高频事件处理： 如拖拽、滚动等场景，家烧内存抖动。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 避免滥用，仅在函数依赖项稳定且性能敏感时使用。</span><br><span class="line">- 空依赖数组（[]）表示函数仅创建一次，需谨慎处理闭包问题。</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="React-memo：优化组件渲染"><a href="#React-memo：优化组件渲染" class="headerlink" title="React.memo：优化组件渲染"></a><code>React.memo</code>：优化组件渲染</h3><p><strong>作用：</strong> 通过浅比较 props 避免函数组件不必要的渲染。<br><strong>适用场景：</strong></p>
<ol>
<li>父组件频繁更新但子组件 props 不变： 如列表项组件。</li>
<li>纯展示型组件： 无内部状态且渲染逻辑仅依赖 props 的组件。</li>
<li>自定义浅比较逻辑： 通过第二个参数自定义 props 对比规则。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">memo</span>(<span class="title class_">Component</span>, <span class="function">(<span class="params">prev, next</span>) =&gt;</span> prev.<span class="property">id</span> === next.<span class="property">id</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>注意事项 ​：<br>​- 浅比较局限性 ​：若 props 包含对象&#x2F;数组，需手动控制比较逻辑。<br>​- 性能权衡 ​：简单组件可能因 React.memo 的浅比较开销反而降低性能。</li>
</ul>
<table>
<thead>
<tr>
<th>场景</th>
<th>技术组合</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>子组件依赖父组件计算属性</td>
<td>useMemo + React.memo</td>
<td>父组件用 useMemo 缓存数据，子组件用 React.memo 避免渲染。</td>
</tr>
<tr>
<td>高频事件回调传递</td>
<td>useCallback + React.memo</td>
<td>父组件用 useCallback 缓存回调，子组件用 React.memo 避免渲染。</td>
</tr>
<tr>
<td>复杂状态衍生数据</td>
<td>useMemo + useCallback</td>
<td>缓存计算值和高频函数，减少重复计算与内存分配。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>Hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React 虚拟 DOM 原理与应用</title>
    <url>/2023/07/05/react%E8%99%9A%E6%8B%9Fdom/</url>
    <content><![CDATA[<h2 id="一、核心概念与设计原理"><a href="#一、核心概念与设计原理" class="headerlink" title="一、核心概念与设计原理"></a>一、核心概念与设计原理</h2><h3 id="定义与本质"><a href="#定义与本质" class="headerlink" title="定义与本质"></a>定义与本质</h3><p>虚拟 DOM 是真实 DOM 的轻量级 JavaScript 对象表示，包含节点类型（sel）、属性（data）、子节点（children）等关键信息。其核心目标是通过内存中的对象操作替代直接 DOM 操作，减少浏览器渲染引擎的重排（Reflow）与重绘（Repaint）开销。</p>
<h3 id="工作原理流程"><a href="#工作原理流程" class="headerlink" title="工作原理流程"></a>工作原理流程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 初始化: 将真实 DOM 转换为虚拟 DOM 树（如 Vue 的 h() 函数生成 VNode）。</span><br><span class="line"></span><br><span class="line">2. 数据变更: 状态变化时生成新虚拟 DOM 树，通过 Diff 算法对比新旧树差异（如 React 的协调算法、Snabbdom  的 patch() 函数）。</span><br><span class="line"></span><br><span class="line">3. 批量更新: 仅将差异部分（patches）批量应用到真实 DOM，避免全量更新。</span><br></pre></td></tr></table></figure>

<h2 id="二、核心优势与适用场景"><a href="#二、核心优势与适用场景" class="headerlink" title="二、核心优势与适用场景"></a>二、核心优势与适用场景</h2><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul>
<li><p>减少直接 DOM 操作</p>
<ul>
<li>虚拟 DOM 通过 Diff 算法精准定位变更节点，避免全树遍历（如列表渲染仅更新变动的 <code>&lt;li&gt;</code>）。</li>
</ul>
</li>
</ul>
<ul>
<li><p>批量处理更新</p>
<ul>
<li>合并多次状态变更，减少浏览器渲染次数（如 React 的异步更新队列）。</li>
</ul>
</li>
<li><p>复杂场景性能提升</p>
<ul>
<li>在动态列表（10 万级数据）、组件化 UI 等场景下，FPS（帧率）可提升 3 - 5 倍。</li>
</ul>
</li>
<li><p>跨平台能力</p>
<ul>
<li>通过抽象层实现多端渲染，如 React Native（移动端）、Next.js（服务端渲染）、Weex（小程序）。</li>
</ul>
</li>
<li><p>开发体验提升</p>
<ul>
<li>声明式编程: 开发者聚焦数据状态（如 Vue 的响应式系统），无需手动操作 DOM。</li>
</ul>
</li>
<li><p>调试友好</p>
<ul>
<li>虚拟 DOM 树可序列化，便于状态快照与调试（如 Redux DevTools）。</li>
</ul>
</li>
</ul>
<h2 id="三、局限性及权衡取舍"><a href="#三、局限性及权衡取舍" class="headerlink" title="三、局限性及权衡取舍"></a>三、局限性及权衡取舍</h2><h3 id="性能损耗场景"><a href="#性能损耗场景" class="headerlink" title="性能损耗场景"></a>性能损耗场景</h3><ol>
<li>初次渲染成本</li>
</ol>
<ul>
<li>构建虚拟 DOM 树可能增加首屏时间（如 SSR 需权衡水合开销）。</li>
</ul>
<ol start="2">
<li>简单操作不适用</li>
</ol>
<ul>
<li>单次 DOM 操作（如修改文本）直接执行更快（测试显示 JS 耗时仅为 DOM 的 1&#x2F;23）。</li>
</ul>
<ol start="3">
<li>内存占用</li>
</ol>
<ul>
<li>大型应用需维护复杂虚拟 DOM 树，可能增加内存压力（如 10 万节点占用约 10MB）。</li>
</ul>
<h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><ol>
<li>Diff 算法效率</li>
</ol>
<ul>
<li>同级比较（同层节点比对）与 Key 值优化是关键，但深度嵌套结构仍可能触发递归性能问题。</li>
</ul>
<h2 id="四、Diff-算法核心机制"><a href="#四、Diff-算法核心机制" class="headerlink" title="四、Diff 算法核心机制"></a>四、Diff 算法核心机制</h2><h3 id="分层对比策略"><a href="#分层对比策略" class="headerlink" title="分层对比策略"></a>分层对比策略</h3><ul>
<li>仅对比同层级节点，避免跨层级移动（时间复杂度从 O(n³) 降至 O(n)）。</li>
</ul>
<ul>
<li><p>Key 值优化</p>
<ul>
<li>通过唯一标识（如 item.id）复用节点，减少无效创建（如列表渲染时 Key 缺失导致全量更新）。</li>
</ul>
</li>
</ul>
<h3 id="更新策略"><a href="#更新策略" class="headerlink" title="更新策略"></a>更新策略</h3><ol>
<li>节点复用</li>
</ol>
<ul>
<li>相同类型节点复用 DOM 元素，仅更新属性（如 class、style）。</li>
</ul>
<ol start="2">
<li>补丁类型</li>
</ol>
<ul>
<li>定义新增、删除、替换等操作类型，生成最小变更集（patches）。</li>
</ul>
<h2 id="五、实际应用与面试要点"><a href="#五、实际应用与面试要点" class="headerlink" title="五、实际应用与面试要点"></a>五、实际应用与面试要点</h2><h3 id="高频问题示例"><a href="#高频问题示例" class="headerlink" title="高频问题示例"></a>高频问题示例</h3><p>1.“虚拟 DOM 一定更快吗？”</p>
<blockquote>
<p>答：否。简单操作用 DOM 更快，但复杂视图（如动态表格、聊天记录）虚拟 DOM 通过批量更新显著优化性能。</p>
</blockquote>
<ol start="2">
<li>“Diff 算法如何工作？”</li>
</ol>
<blockquote>
<p>答：分三层——树对比（同层）、组件对比（类型一致性）、元素对比（属性&#x2F;子节点），依赖 Key 值优化。</p>
</blockquote>
<h2 id="六、总结与延伸"><a href="#六、总结与延伸" class="headerlink" title="六、总结与延伸"></a>六、总结与延伸</h2><p>虚拟 DOM 是权衡性能、开发效率与跨平台能力的折中方案，适用于中大型复杂应用。面试中需结合框架（如 React&#x2F;Vue）具体实现，强调场景化分析（如首屏 VS 更新性能）与技术选型依据（如项目规模、交互复杂度）</p>
<hr>
<h2 id="虚拟-DOM-Diff-算法与直接-DOM-操作对比示例"><a href="#虚拟-DOM-Diff-算法与直接-DOM-操作对比示例" class="headerlink" title="虚拟 DOM Diff 算法与直接 DOM 操作对比示例"></a>虚拟 DOM Diff 算法与直接 DOM 操作对比示例</h2><p>假设我们有一个列表需要更新，从 [‘A’, ‘B’, ‘C’] 变为 [‘A’, ‘D’, ‘B’, ‘C’]</p>
<h2 id="1-直接-DOM-操作方式"><a href="#1-直接-DOM-操作方式" class="headerlink" title="1. 直接 DOM 操作方式"></a>1. 直接 DOM 操作方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取DOM节点</span></span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完全重新创建整个列表</span></span><br><span class="line">list.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>; <span class="comment">// 先清空</span></span><br><span class="line">[<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  li.<span class="property">textContent</span> = item;</span><br><span class="line">  list.<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或稍微优化的逐个节点操作</span></span><br><span class="line"><span class="keyword">const</span> items = list.<span class="property">children</span>;</span><br><span class="line">items[<span class="number">1</span>].<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;beforebegin&quot;</span>, <span class="string">&quot;&lt;li&gt;D&lt;/li&gt;&quot;</span>); <span class="comment">// 在B前插入D</span></span><br></pre></td></tr></table></figure>

<p>直接 DOM 操作的问题：</p>
<ul>
<li>要么全量重建（性能差）</li>
<li>要么需要手动计算最小变更（开发复杂）</li>
</ul>
<h2 id="2-虚拟-DOM-Diff-方式"><a href="#2-虚拟-DOM-Diff-方式" class="headerlink" title="2. 虚拟 DOM Diff 方式"></a>2. 虚拟 DOM Diff 方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React的简化版Diff过程</span></span><br><span class="line"><span class="keyword">const</span> oldVDOM = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]; <span class="comment">// 旧虚拟DOM</span></span><br><span class="line"><span class="keyword">const</span> newVDOM = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>]; <span class="comment">// 新虚拟DOM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Diff算法会识别出:</span></span><br><span class="line"><span class="comment">// 1. &#x27;A&#x27;未变化 (复用DOM节点)</span></span><br><span class="line"><span class="comment">// 2. 需要在&#x27;B&#x27;前插入&#x27;D&#x27;</span></span><br><span class="line"><span class="comment">// 3. &#x27;B&#x27;和&#x27;C&#x27;向后移动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的patches(变更集)类似:</span></span><br><span class="line"><span class="keyword">const</span> patches = [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;INSERT&quot;</span>, <span class="attr">index</span>: <span class="number">1</span>, <span class="attr">content</span>: <span class="string">&quot;D&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;MOVE&quot;</span>, <span class="attr">fromIndex</span>: <span class="number">2</span>, <span class="attr">toIndex</span>: <span class="number">3</span> &#125;, <span class="comment">// B</span></span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&quot;MOVE&quot;</span>, <span class="attr">fromIndex</span>: <span class="number">3</span>, <span class="attr">toIndex</span>: <span class="number">4</span> &#125;, <span class="comment">// C</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终只执行3个DOM操作:</span></span><br><span class="line"><span class="comment">// 1. 在位置1插入D</span></span><br><span class="line"><span class="comment">// 2. 将B移动到位置3</span></span><br><span class="line"><span class="comment">// 3. 将C移动到位置4</span></span><br></pre></td></tr></table></figure>

<h3 id="虚拟-DOM-Diff-的优势："><a href="#虚拟-DOM-Diff-的优势：" class="headerlink" title="虚拟 DOM Diff 的优势："></a>虚拟 DOM Diff 的优势：</h3><ul>
<li>自动计算最小变更集</li>
<li>批量执行 DOM 操作</li>
<li>保持现有 DOM 节点复用</li>
</ul>
<h3 id="关键区别总结"><a href="#关键区别总结" class="headerlink" title="关键区别总结"></a>关键区别总结</h3><table>
<thead>
<tr>
<th>对比项</th>
<th>直接 DOM 操作</th>
<th>虚拟 DOM Diff</th>
</tr>
</thead>
<tbody><tr>
<td>变更计算</td>
<td>开发者手动计算</td>
<td>框架自动计算</td>
</tr>
<tr>
<td>DOM 操作</td>
<td>可能全量更新</td>
<td>仅差异更新</td>
</tr>
<tr>
<td>性能</td>
<td>简单场景更快</td>
<td>复杂场景更优</td>
</tr>
<tr>
<td>开发成本</td>
<td>高(需手动优化)</td>
<td>低(自动优化)</td>
</tr>
<tr>
<td>节点复用</td>
<td>需手动处理</td>
<td>自动处理</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
        <tag>虚拟DOM(Virtual DOM)</tag>
      </tags>
  </entry>
  <entry>
    <title>React项目中Markdown集成完整指南</title>
    <url>/2023/07/01/react%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%95%E5%85%A5markdown/</url>
    <content><![CDATA[<h2 id="推荐方案"><a href="#推荐方案" class="headerlink" title="推荐方案"></a>推荐方案</h2><blockquote>
<p>如果你需要完整的 Markdown 渲染功能，推荐使用 react-markdown + remark-gfm + react-syntax-highlighter 组合。如果需要编辑器功能，可以使用 react-md-editor 。</p>
</blockquote>
<h3 id="1-react-markdown"><a href="#1-react-markdown" class="headerlink" title="1. react-markdown"></a>1. react-markdown</h3><blockquote>
<p>功能: 将 Markdown 转换为 React 组件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-markdown</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span>&gt;</span>&#123;markdown&#125;<span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-remark-gfm"><a href="#2-remark-gfm" class="headerlink" title="2. remark-gfm"></a>2. remark-gfm</h3><blockquote>
<p>功能 : 支持 GitHub Flavored Markdown（GFM）语法</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install remark-gfm</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> remarkGfm <span class="keyword">from</span> <span class="string">&quot;remark-gfm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span> <span class="attr">remarkPlugins</span>=<span class="string">&#123;[remarkGfm]&#125;</span>&gt;</span>&#123;markdown&#125;<span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-react-syntax-highlighter"><a href="#3-react-syntax-highlighter" class="headerlink" title="3. react-syntax-highlighter"></a>3. react-syntax-highlighter</h3><blockquote>
<p>功能 : 高亮代码块</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-syntax-highlighter</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Prism</span> <span class="keyword">as</span> <span class="title class_">SyntaxHighlighter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-syntax-highlighter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; dracula &#125; <span class="keyword">from</span> <span class="string">&quot;react-syntax-highlighter/dist/esm/styles/prism&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">components</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">code</span>(&#123; <span class="attr">node</span>, <span class="attr">inline</span>, <span class="attr">className</span>, <span class="attr">children</span>, <span class="attr">...props</span> &#125;) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">const</span> <span class="attr">match</span> = <span class="string">/language-(\w+)/.exec(className</span> || &quot;&quot;);</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">return</span> !<span class="attr">inline</span> &amp;&amp; <span class="attr">match</span> ? (</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &lt;<span class="attr">SyntaxHighlighter</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;dracula&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">language</span>=<span class="string">&#123;match[1]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">PreTag</span>=<span class="string">&quot;div&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;String(children).replace(/\n$/, &quot;&quot;)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">SyntaxHighlighter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ) : (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">code</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          );</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      &#123;markdown&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4-markdown-to-jsx"><a href="#4-markdown-to-jsx" class="headerlink" title="4. markdown-to-jsx"></a>4. markdown-to-jsx</h3><blockquote>
<p>功能 : 可以将 Markdown 转换为 JSX 组件,轻量级 Markdown 渲染器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install markdown-to-jsx</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Markdown</span> <span class="keyword">from</span> <span class="string">&quot;markdown-to-jsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; markdown &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Markdown</span>&gt;</span>&#123;markdown&#125;<span class="tag">&lt;/<span class="name">Markdown</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownRenderer</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5-react-md-editor"><a href="#5-react-md-editor" class="headerlink" title="5. react-md-editor"></a>5. react-md-editor</h3><blockquote>
<p>功能 : Markdown 编辑器</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @uiw/react-md-editor</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MDEditor</span> <span class="keyword">from</span> <span class="string">&quot;@uiw/react-md-editor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownEditor</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&quot;**Hello world!!!**&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MDEditor</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;setValue&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownEditor</span>;</span><br></pre></td></tr></table></figure>

<h2 id="配置-Markdown-解析"><a href="#配置-Markdown-解析" class="headerlink" title="配置 Markdown 解析"></a>配置 Markdown 解析</h2><ol>
<li>安装依赖包：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install react-markdown remark-gfm rehype-highlight</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建 Markdown 解析组件：</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/components/MarkdownRenderer.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&quot;react-markdown&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> remarkGfm <span class="keyword">from</span> <span class="string">&quot;remark-gfm&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> rehypeHighlight <span class="keyword">from</span> <span class="string">&quot;rehype-highlight&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownRenderer</span> = (<span class="params">&#123; content &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ReactMarkdown</span> <span class="attr">remarkPlugins</span>=<span class="string">&#123;[remarkGfm]&#125;</span> <span class="attr">rehypePlugins</span>=<span class="string">&#123;[rehypeHighlight]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="自动生成目录"><a href="#自动生成目录" class="headerlink" title="自动生成目录"></a>自动生成目录</h2><blockquote>
<p>侧边导航栏</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在MarkdownRenderer组件中添加：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateTOC</span> = (<span class="params">content</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> headings = content.<span class="title function_">match</span>(<span class="regexp">/^##+ .+/gm</span>) || [];</span><br><span class="line">  <span class="keyword">return</span> headings.<span class="title function_">map</span>(<span class="function">(<span class="params">heading</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">level</span>: heading.<span class="title function_">match</span>(<span class="regexp">/##+/</span>)[<span class="number">0</span>].<span class="property">length</span>,</span><br><span class="line">    <span class="attr">title</span>: heading.<span class="title function_">replace</span>(<span class="regexp">/##+ /</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例：</span></span><br><span class="line"><span class="keyword">const</span> &#123; content &#125; = props;</span><br><span class="line"><span class="keyword">const</span> toc = <span class="title function_">generateTOC</span>(content);</span><br></pre></td></tr></table></figure>

<h2 id="样式优化"><a href="#样式优化" class="headerlink" title="样式优化"></a>样式优化</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/styles/markdown.scss</span></span><br><span class="line"><span class="selector-class">.markdown-body</span> &#123;</span><br><span class="line">  <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pre &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f6f8fa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整实现示例"><a href="#完整实现示例" class="headerlink" title="完整实现示例"></a>完整实现示例</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面组件使用示例：</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactMarkdown</span> <span class="keyword">from</span> <span class="string">&#x27;react-markdown&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> remarkGfm <span class="keyword">from</span> <span class="string">&#x27;remark-gfm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rehypeHighlight <span class="keyword">from</span> <span class="string">&#x27;rehype-highlight&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取table组件,避免React 在每次渲染时都看到一个新组件类型，从而销毁整个子树的 DOM 节点和状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderTableCom</span> = (<span class="params">&#123; node, ...props &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">overflowX:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">table</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">borderCollapse:</span> &#x27;<span class="attr">collapse</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">margin:</span> &#x27;<span class="attr">16px</span> <span class="attr">0</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderThCom</span> = (<span class="params">&#123; node, ...props &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">th</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">solid</span> #<span class="attr">ddd</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">padding:</span> &#x27;<span class="attr">8px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">backgroundColor:</span> &#x27;#<span class="attr">f5f5f5</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderTdCom</span> = (<span class="params">&#123; node, ...props &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">td</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">solid</span> #<span class="attr">ddd</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">padding:</span> &#x27;<span class="attr">8px</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成目录的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateTOC</span> = (<span class="params">content</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 使用正则表达式匹配所有以 ## 开头的标题行</span></span><br><span class="line">  <span class="comment">// ^##+ 表示匹配以两个或更多 # 开头的行</span></span><br><span class="line">  <span class="comment">// .+ 表示匹配标题内容</span></span><br><span class="line">  <span class="comment">// gm 表示全局匹配和多行匹配</span></span><br><span class="line">  <span class="keyword">const</span> headings = content.<span class="title function_">match</span>(<span class="regexp">/^##+ .+/gm</span>) || [];</span><br><span class="line">  <span class="comment">// 将匹配到的标题行转换为目录项</span></span><br><span class="line">  <span class="keyword">return</span> headings.<span class="title function_">map</span>(<span class="function">(<span class="params">heading</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 获取标题的层级（通过计算 # 的数量）</span></span><br><span class="line">    <span class="attr">level</span>: heading.<span class="title function_">match</span>(<span class="regexp">/##+/</span>)[<span class="number">0</span>].<span class="property">length</span>,</span><br><span class="line">    <span class="comment">// 去除标题前的 # 和空格，获取纯文本标题</span></span><br><span class="line">    <span class="attr">title</span>: heading.<span class="title function_">replace</span>(<span class="regexp">/##+ /</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    <span class="attr">id</span>: heading.<span class="title function_">replace</span>(<span class="regexp">/##+ /</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">toLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;-&#x27;</span>), <span class="comment">// 生成锚点 ID</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line react/prop-types</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MarkdownWithTOC</span> = (<span class="params">&#123; content &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [toc, setToc] = <span class="title function_">useState</span>([]);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setToc</span>(<span class="title function_">generateTOC</span>(content));</span><br><span class="line">  &#125;, [content]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 目录侧边栏 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">aside</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">200px</span>&#x27;, <span class="attr">marginRight:</span> &#x27;<span class="attr">20px</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>目录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;toc.map((item, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;item.id</span> || <span class="attr">index</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginLeft:</span> `$&#123;(<span class="attr">item.level</span> <span class="attr">-</span> <span class="attr">2</span>) * <span class="attr">15</span>&#125;<span class="attr">px</span>` &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;</span>`#$&#123;<span class="attr">item.id</span>&#125;`&#125;&gt;</span>&#123;item.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* Markdown 内容 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">flex:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ReactMarkdown</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">remarkPlugins</span>=<span class="string">&#123;[remarkGfm]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rehypePlugins</span>=<span class="string">&#123;[rehypeHighlight]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">components</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">table:</span> <span class="attr">renderTableCom</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">th:</span> <span class="attr">renderThCom</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">td:</span> <span class="attr">renderTdCom</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ReactMarkdown</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MarkdownWithTOC</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="vite-项目加载-md-文件的两种方式"><a href="#vite-项目加载-md-文件的两种方式" class="headerlink" title="vite 项目加载 md 文件的两种方式"></a>vite 项目加载 md 文件的两种方式</h2><h3 id="1-使用-import-引用-推荐，性能好"><a href="#1-使用-import-引用-推荐，性能好" class="headerlink" title="1. 使用 import 引用 (推荐，性能好)"></a>1. 使用 import 引用 (推荐，性能好)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> markdownContent <span class="keyword">from</span> <span class="string">&quot;@/assets/interview-notes.md?raw&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>@&#x2F;assets&#x2F;interview-notes.md ：</li>
</ol>
<ul>
<li>@ 是 Vite 中配置的路径别名，通常指向 src 目录</li>
<li>表示从 src&#x2F;assets 目录下导入 interview-notes.md 文件</li>
</ul>
<ol start="2">
<li>?raw 后缀 ：</li>
</ol>
<ul>
<li>这是 Vite 的特殊查询参数</li>
<li>表示以原始字符串的形式导入文件内容，而不是作为模块处理</li>
<li>适合用于导入纯文本文件，如 Markdown、JSON 等</li>
</ul>
<ol start="3">
<li>markdownContent ：</li>
</ol>
<ul>
<li>导入的内容会被赋值给 markdownContent 变量</li>
<li>变量类型是字符串，包含 Markdown 文件的完整内容</li>
</ul>
<p>这种导入方式的特点：</p>
<ul>
<li><p>文件内容会在构建时被处理</p>
</li>
<li><p>支持热更新（HMR），修改文件后页面会自动刷新</p>
</li>
<li><p>相比 fetch 请求，性能更好，因为文件内容会被打包进 JavaScript 文件中<br>注意：需要确保 vite.config.js 中配置了正确的路径别名和 Markdown 文件处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="string">&quot;/src&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">assetsInclude</span>: [<span class="string">&quot;**/*.md&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-使用-fetch-请求"><a href="#2-使用-fetch-请求" class="headerlink" title="2. 使用 fetch 请求"></a>2. 使用 fetch 请求</h3></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [markdownContent, setMarkdownContent] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> [isLoading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">PROD</span></span><br><span class="line">      ? <span class="string">`<span class="subst">$&#123;<span class="keyword">import</span>.meta.env.BASE_URL&#125;</span>/interview-notes.md`</span></span><br><span class="line">      : <span class="string">&quot;/interview-notes.md&quot;</span></span><br><span class="line">  )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">text</span>) =&gt;</span> <span class="title function_">setMarkdownContent</span>(text))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">setLoading</span>(<span class="literal">false</span>));</span><br><span class="line">  s;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure>

<p>这种导入方式的特点：</p>
<ul>
<li><p>文件会被作为静态文件处理，不会被打包进 JavaScript 文件中, 需要处理开发环境和生产环境的路径问题</p>
</li>
<li><p>适合用于导入较大的文件，如图片、视频等</p>
</li>
<li><p>可以动态加载 Markdown 文件，根据需要进行请求</p>
</li>
<li><p>注意：需要确保 vite.config.js 中配置了正确的路径别名和 Markdown 文件处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="string">&quot;/src&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">assetsInclude</span>: [<span class="string">&quot;**/*.md&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol>
<li>配合 SSG 方案在构建时预解析 Markdown</li>
<li>使用自定义组件替换原生 HTML 标签</li>
<li>添加代码复制按钮等增强功能</li>
<li>实现目录自动滚动定位</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>事件循环机制(Event Loop)</title>
    <url>/2022/04/01/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6-Event-Loop/</url>
    <content><![CDATA[<h2 id="一、事件循环的核心组成"><a href="#一、事件循环的核心组成" class="headerlink" title="一、事件循环的核心组成"></a>一、事件循环的核心组成</h2><h3 id="1-调用栈（Call-Stack）"><a href="#1-调用栈（Call-Stack）" class="headerlink" title="1. 调用栈（Call Stack）"></a>1. 调用栈（Call Stack）</h3><ul>
<li>用于执行<strong>同步代码</strong>，遵循后进先出（LIFO）原则</li>
<li>函数调用被压入栈中，执行完毕后弹出</li>
</ul>
<h3 id="2-任务队列（Task-Queues）"><a href="#2-任务队列（Task-Queues）" class="headerlink" title="2. 任务队列（Task Queues）"></a>2. 任务队列（Task Queues）</h3><table>
<thead>
<tr>
<th>队列类型</th>
<th>包含的任务示例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>宏任务队列</strong></td>
<td><code>setTimeout</code>, <code>setInterval</code>, DOM 事件回调, I&#x2F;O 操作</td>
</tr>
<tr>
<td><strong>微任务队列</strong></td>
<td><code>Promise.then</code>, <code>MutationObserver</code>, <code>process.nextTick</code>（Node.js）</td>
</tr>
</tbody></table>
<h3 id="3-事件循环工作流程"><a href="#3-事件循环工作流程" class="headerlink" title="3. 事件循环工作流程"></a>3. 事件循环工作流程</h3><ol>
<li>执行调用栈中的同步代码</li>
<li>调用栈清空后，检查并执行<strong>所有微任务</strong></li>
<li>微任务队列清空后，执行<strong>一个宏任务</strong></li>
<li>重复上述过程</li>
</ol>
<hr>
<h2 id="二、执行优先级规则"><a href="#二、执行优先级规则" class="headerlink" title="二、执行优先级规则"></a>二、执行优先级规则</h2><h3 id="1-基础优先级"><a href="#1-基础优先级" class="headerlink" title="1. 基础优先级"></a>1. 基础优先级</h3><ol>
<li><p>同步代码 &gt; 微任务 &gt; 宏任务</p>
</li>
<li><p>微任务优先级高于宏任务</p>
<ul>
<li><p>每个宏任务执行完毕后，会清空微任务队列，包括执行过程中新产生的微任务。</p>
</li>
<li><p>微任务队列必须完全清空后，才会执行下一个宏任务。</p>
</li>
</ul>
</li>
<li><p>同类型任务的执行顺序</p>
<ul>
<li><p>宏任务按入队顺序执行（如多个 setTimeout 按延迟时间到期顺序执行）。</p>
</li>
<li><p>微任务按入队顺序执行，且新添加的微任务会在此轮事件循环中执行。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h2 id="三、执行优先级规则"><a href="#三、执行优先级规则" class="headerlink" title="三、执行优先级规则"></a>三、执行优先级规则</h2><h3 id="1-示例代码分析"><a href="#1-示例代码分析" class="headerlink" title="1. 示例代码分析"></a>1. 示例代码分析</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同步1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;宏任务1&quot;</span>);</span><br><span class="line">  <span class="variable constant_">SS</span>;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;宏任务1的微任务&quot;</span>));</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;微任务1&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;微任务1的宏任务&quot;</span>), <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同步2&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-执行顺序解析"><a href="#2-执行顺序解析" class="headerlink" title="2. 执行顺序解析"></a>2. 执行顺序解析</h3><ol>
<li><p>同步代码<br>输出：同步 1 → 同步 2。</p>
</li>
<li><p>微任务队列处理</p>
<ul>
<li><p>执行 Promise.resolve().then，输出 微任务 1。</p>
</li>
<li><p>内部的 setTimeout 将新宏任务加入队列。</p>
</li>
</ul>
</li>
<li><p>宏任务队列处理</p>
<ul>
<li><p>执行第一个 setTimeout 回调，输出 宏任务 1。</p>
</li>
<li><p>其内部的 Promise.then 将微任务加入队列。</p>
</li>
<li><p>再次清空微任务队列，输出 宏任务 1 的微任务。</p>
</li>
</ul>
</li>
<li><p>处理新加入的宏任务</p>
<ul>
<li>执行由微任务中添加的 setTimeout，输出 微任务 1 的宏任务。</li>
</ul>
</li>
</ol>
<h3 id="3-最终输出顺序"><a href="#3-最终输出顺序" class="headerlink" title="3. 最终输出顺序"></a>3. 最终输出顺序</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">同步1 → 同步2 → 微任务1 → 宏任务1 → 宏任务1的微任务 → 微任务1的宏任务</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、特殊场景与注意事项"><a href="#四、特殊场景与注意事项" class="headerlink" title="四、特殊场景与注意事项"></a>四、特殊场景与注意事项</h2><ol>
<li><p>微任务递归调用</p>
<p>若在微任务中不断添加新的微任务（如递归调用 Promise.then），会导致事件循环卡在微任务阶段，无法执行宏任务</p>
</li>
<li><p>浏览器与 Node.js 的差异</p>
<ul>
<li><p>浏览器：微任务在渲染（如重绘）前执行。</p>
</li>
<li><p>Node.js：process.nextTick 优先级高于 Promise.then，且事件循环分为多个阶段（如 timers、poll、check）。</p>
</li>
</ul>
</li>
<li><p>process.nextTick、Promise.then 和 setTimeout、setImmediate 的区别</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 典型执行顺序演示</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setImmediate&quot;</span>));</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nextTick&quot;</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同步代码&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步代码 -&gt;  nextTick -&gt; promise -&gt; setTimeout -&gt; setImmediate</span></span><br></pre></td></tr></table></figure>

<ul>
<li>为什么这样设计？<ul>
<li>nextTick ：用于紧急任务（如错误处理）</li>
<li>Promise ：标准化的异步处理</li>
<li>setImmediate ：避免 setTimeout 的最小延迟问题</li>
<li>setTimeout ：精确时间控制（虽然不绝对精确）</li>
</ul>
</li>
</ul>
<blockquote>
<p>同步代码 &gt; nextTick &gt; Promise &gt; setTimeout &gt; setImmediate</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要立即执行（如初始化）</span></span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;初始化完成&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不紧急但需要保证顺序</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据预处理&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要延迟但不确定时间</span></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;日志清理&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精确延迟（如重试机制）</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求重试&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><table>
<thead>
<tr>
<th>任务类型</th>
<th>示例</th>
<th>执行时机</th>
</tr>
</thead>
<tbody><tr>
<td>同步代码</td>
<td>console.log</td>
<td>立即执行</td>
</tr>
<tr>
<td>微任务</td>
<td>Promise.then</td>
<td>调用栈清空后，宏任务前执行</td>
</tr>
<tr>
<td>宏任务</td>
<td>setTimeout, I&#x2F;O</td>
<td>每轮事件循环处理一个宏任务</td>
</tr>
</tbody></table>
<h3 id="核心规则："><a href="#核心规则：" class="headerlink" title="核心规则："></a>核心规则：</h3><blockquote>
<p>同步代码 → 微任务队列清空 → 一个宏任务 → 微任务队列清空 → 下一个宏任务…<br>理解事件循环的优先级机制，能够帮助开发者更好地控制代码执行顺序，避免异步逻辑的混乱。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>JavaScript 基础知识</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript 基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器原生请求对象</title>
    <url>/2022/07/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%94%9F%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="前端请求技术全景：从原生-API-到框架最佳实践"><a href="#前端请求技术全景：从原生-API-到框架最佳实践" class="headerlink" title="前端请求技术全景：从原生 API 到框架最佳实践"></a>前端请求技术全景：从原生 API 到框架最佳实践</h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>前端请求技术经历了三个阶段演进：</p>
<ol>
<li><strong>XMLHttpRequest 时代</strong>（2005）：首个异步请求 API，催生 Ajax 革命</li>
<li><strong>Fetch API 时代</strong>（2015）：基于 Promise 的现代化方案</li>
<li><strong>封装库时代</strong>：axios 等库填补原生 API 的易用性缺口</li>
</ol>
<p>现代 Web 应用平均发起 50+次请求，请求处理能力直接影响用户体验和核心业务指标。</p>
<hr>
<h2 id="2-原生-API-详解"><a href="#2-原生-API-详解" class="headerlink" title="2. 原生 API 详解"></a>2. 原生 API 详解</h2><h3 id="XHR-vs-Fetch-核心对比"><a href="#XHR-vs-Fetch-核心对比" class="headerlink" title="XHR vs Fetch 核心对比"></a>XHR vs Fetch 核心对比</h3><table>
<thead>
<tr>
<th>特性</th>
<th>XHR</th>
<th>Fetch</th>
</tr>
</thead>
<tbody><tr>
<td>异步模型</td>
<td>回调机制</td>
<td>Promise</td>
</tr>
<tr>
<td>请求终止</td>
<td>xhr.abort()</td>
<td>AbortController</td>
</tr>
<tr>
<td>进度监控</td>
<td>progress 事件</td>
<td>不可直接支持</td>
</tr>
<tr>
<td>超时设置</td>
<td>timeout 属性</td>
<td>需手动封装</td>
</tr>
<tr>
<td>CORS 处理</td>
<td>需 withCredentials</td>
<td>credentials 参数</td>
</tr>
</tbody></table>
<h3 id="XHR-示例"><a href="#XHR-示例" class="headerlink" title="XHR 示例"></a>XHR 示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单实现ajax s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;xxxxxxxxxxxx&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">XHR</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// XHR 支持同步请求（ open 方法的第三个参数设为 false ），但会阻塞 UI 线程，通常不推荐使用。</span></span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** readyState</span></span><br><span class="line"><span class="comment"> * 0(UNSENT): 请求未初始化 (open()方法未被调用)</span></span><br><span class="line"><span class="comment"> * 1(OPEND): 服务器连接已建立 (open()方法已被调用, send() 还未调用)</span></span><br><span class="line"><span class="comment"> * 2(HEADER_RECEIVED): 请求已接收 (send()方法已被调用,且响应头和状态码已收到)</span></span><br><span class="line"><span class="comment"> * 3(LOADING): 请求处理中,正在接收响应体，此时 responseText 属性可能包含部分数据</span></span><br><span class="line"><span class="comment"> * 4(DONE): 请求已完成，且响应已就绪 (响应数据已完全接收或请求失败)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable constant_">XHR</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 检查XMLHttpRequest对象的状态和响应状态码</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">XHR</span>.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; <span class="variable constant_">XHR</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 当请求已完成（readyState为4）且响应状态码为200（成功）时执行以下代码</span></span><br><span class="line">    <span class="comment">// 将响应文本解析为JSON对象</span></span><br><span class="line">    result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable constant_">XHR</span>.<span class="property">responseText</span>);</span><br><span class="line">    <span class="comment">// 将解析后的结果输出到控制台</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Fetch-示例：带超时的-GET-请求"><a href="#Fetch-示例：带超时的-GET-请求" class="headerlink" title="Fetch 示例：带超时的 GET 请求"></a>Fetch 示例：带超时的 GET 请求</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> controller.<span class="title function_">abort</span>(), <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;/api/data&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">signal</span>: controller.<span class="property">signal</span>,</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&quot;AbortError&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求超时&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-封装库分析：axios-核心优势"><a href="#3-封装库分析：axios-核心优势" class="headerlink" title="3. 封装库分析：axios 核心优势"></a>3. 封装库分析：axios 核心优势</h2><h3 id="核心能力矩阵"><a href="#核心能力矩阵" class="headerlink" title="核心能力矩阵"></a>核心能力矩阵</h3><ol>
<li>拦截器系统</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器 - 在请求发送前执行</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 修改请求配置对象，添加 Authorization 请求头</span></span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="title function_">getToken</span>();</span><br><span class="line">  <span class="comment">// 必须返回修改后的配置对象</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器 - 在响应返回后执行</span></span><br><span class="line"><span class="comment">// normalizeData 和 handleApiErrord 是自定义的处理函数</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="comment">// 第一个函数处理成功响应 (状态码 2xx)</span></span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> <span class="title function_">normalizeData</span>(response.<span class="property">data</span>),</span><br><span class="line">  <span class="comment">// 第二个函数处理错误响应 (状态码非 2xx)</span></span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> <span class="title function_">handleApiError</span>(error)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>关键点说明：</p>
<ol>
<li><p>请求拦截器 ：</p>
<ul>
<li>通过 axios.interceptors.request.use() 注册</li>
<li>每次发送请求前自动执行</li>
<li>典型用途：添加认证头、设置公共参数、修改请求配置</li>
<li>示例中自动添加了 Authorization 头，值来自 getToken() 函数</li>
</ul>
</li>
<li><p>响应拦截器 ：</p>
<ul>
<li>通过 axios.interceptors.response.use() 注册</li>
<li>接收两个回调函数：成功回调和错误回调</li>
<li>成功时：对响应数据进行标准化处理 ( normalizeData )</li>
<li>错误时：统一错误处理 ( handleApiError )</li>
</ul>
</li>
<li><p>拦截器链 ：</p>
<ul>
<li>可以注册多个拦截器，按注册顺序形成处理链</li>
<li>请求拦截器：后注册的先执行</li>
<li>响应拦截器：先注册的先执行<br>这种设计实现了请求&#x2F;响应的统一处理，避免了在每个请求中重复相同的逻辑。</li>
</ul>
</li>
</ol>
</li>
</ul>
<ol start="2">
<li>取消请求（CancelToken 已弃用，推荐 AbortController）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 AbortController 实例</span></span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 发起 GET 请求，将 controller 的 signal 传入请求配置</span></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;/api/data&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">signal</span>: controller.<span class="property">signal</span>, <span class="comment">// 将中止信号与请求关联</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 请求成功处理逻辑</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(error)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求已被取消:&quot;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求错误:&quot;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 需要取消请求时调用 abort() 方法</span></span><br><span class="line">controller.<span class="title function_">abort</span>(); <span class="comment">// 这会触发请求取消</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>关键点说明：</p>
<ol>
<li><p>AbortController ：</p>
<ul>
<li>是现代浏览器提供的原生 API</li>
<li>通过 signal 属性提供中止信号</li>
<li>调用 abort() 方法会触发请求取消</li>
</ul>
</li>
<li><p>axios 集成 ：</p>
<ul>
<li>将 controller.signal 传入请求配置</li>
<li>当调用 abort() 时，axios 会自动取消请求</li>
<li>取消后会触发 catch 分支，错误类型为 Cancel</li>
</ul>
</li>
<li><p>应用场景 ：</p>
<ul>
<li>用户导航离开页面时取消未完成请求</li>
<li>表单提交后防止重复提交</li>
<li>实现请求超时控制（配合 setTimeout ）</li>
</ul>
</li>
<li><p>与传统 CancelToken 的区别 ：</p>
<ul>
<li>这是浏览器原生方案，不再依赖 axios 特有的 CancelToken</li>
<li>更简洁，与现代 Fetch API 的取消机制一致</li>
<li>CancelToken 已被标记为 deprecated</li>
</ul>
</li>
</ol>
</li>
</ul>
<ol start="3">
<li><p>自动转换</p>
<ul>
<li><p>自动 JSON 解析</p>
</li>
<li><p>请求数据序列化</p>
</li>
<li><p>浏览器环境自动 XSRF 防御</p>
</li>
</ul>
</li>
</ol>
<h2 id="4-框架集成最佳实践"><a href="#4-框架集成最佳实践" class="headerlink" title="4. 框架集成最佳实践"></a>4. 框架集成最佳实践</h2><h3 id="React-方案"><a href="#React-方案" class="headerlink" title="React 方案"></a>React 方案</h3><blockquote>
<p>这段代码实现了一个自定义 React Hook useFetch ，用于封装 axios 的数据获取逻辑，具有自动取消请求的功能</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useFetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 使用 useState 管理获取到的数据状态</span></span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 使用 useEffect 处理副作用</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 3. 创建 AbortController 用于取消请求</span></span><br><span class="line">    <span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 发起 axios GET 请求</span></span><br><span class="line">    axios</span><br><span class="line">      .<span class="title function_">get</span>(url, &#123;</span><br><span class="line">        <span class="attr">signal</span>: controller.<span class="property">signal</span>, <span class="comment">// 绑定取消信号</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">setData</span>(res.<span class="property">data</span>)) <span class="comment">// 成功时更新状态</span></span><br><span class="line">      .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>); <span class="comment">// 错误时打印日志</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 清理函数：组件卸载时取消请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> controller.<span class="title function_">abort</span>();</span><br><span class="line">  &#125;, [url]); <span class="comment">// 6. 依赖项：url 变化时重新执行</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7. 返回获取到的数据</span></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用示例:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">useFetch</span>(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!data) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;JSON.stringify(data)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-3-组合式-API"><a href="#Vue-3-组合式-API" class="headerlink" title="Vue 3 组合式 API"></a>Vue 3 组合式 API</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useFetch &#125; <span class="keyword">from</span> <span class="string">&quot;@vueuse/core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useFetch</span>(<span class="string">&quot;/api/data&quot;</span>).<span class="title function_">get</span>().<span class="title function_">json</span>();</span><br></pre></td></tr></table></figure>

<h2 id="5-高级应用场景"><a href="#5-高级应用场景" class="headerlink" title="5. 高级应用场景"></a>5. 高级应用场景</h2><h3 id="WebSocket-实时通信"><a href="#WebSocket-实时通信" class="headerlink" title="WebSocket 实时通信"></a>WebSocket 实时通信</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 WebSocket 连接，指定服务器地址</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 连接建立成功回调</span></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接已建立&quot;</span>);</span><br><span class="line">  <span class="comment">// 连接建立后立即向服务器发送消息</span></span><br><span class="line">  socket.<span class="title function_">send</span>(<span class="string">&quot;Hello, Server!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 收到服务器消息回调</span></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// event.data 包含服务器发送的数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到消息:&quot;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 连接关闭回调</span></span><br><span class="line">socket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接已关闭&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>基础知识</tag>
        <tag>浏览器-请求对象</tag>
      </tags>
  </entry>
  <entry>
    <title>学习目录</title>
    <url>/2018/05/01/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<img src="/images/page-header.png" class="" title="首页展示 width&#x3D;50%">

<!-- ![首页展示](/images/page-header.png)s -->

<h2 id="算法题解"><a href="#算法题解" class="headerlink" title="算法题解"></a>算法题解</h2><h3 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h3><h4 id="数组-vs-链表"><a href="#数组-vs-链表" class="headerlink" title="数组 vs 链表"></a>数组 vs 链表</h4><p><strong>存储方式</strong></p>
<ul>
<li>数组：连续内存空间，预分配大小</li>
<li>链表：节点离散存储，动态扩展</li>
</ul>
<p><strong>时间复杂度对比</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>随机访问</td>
<td>O(1)</td>
<td>O(n)</td>
</tr>
<tr>
<td>头部插入</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
<tr>
<td>尾部追加</td>
<td>O(1)</td>
<td>O(1)</td>
</tr>
</tbody></table>
<p><strong>应用场景</strong></p>
<ul>
<li>数组：需要频繁随机访问（如矩阵运算）</li>
<li>链表：频繁增删操作（如 LRU 缓存）</li>
</ul>
<h4 id="栈-队列"><a href="#栈-队列" class="headerlink" title="栈 &amp; 队列"></a>栈 &amp; 队列</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最小栈实现（支持O(1)获取最小值）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minStack</span> = [<span class="title class_">Infinity</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">push</span>(val);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(val, <span class="variable language_">this</span>.<span class="property">minStack</span>[<span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="property">length</span> - <span class="number">1</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stack</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getMin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">minStack</span>[<span class="variable language_">this</span>.<span class="property">minStack</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用队列实现栈</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue = collections.deque()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue.append(x)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.queue)-<span class="number">1</span>):</span><br><span class="line">            <span class="variable language_">self</span>.queue.append(<span class="variable language_">self</span>.queue.popleft())</span><br></pre></td></tr></table></figure>

<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p><strong>冲突解决</strong></p>
<ul>
<li>开放寻址法：线性探测、二次探测</li>
<li>链地址法：链表存储冲突元素（Java HashMap）</li>
</ul>
<h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul>
<li>完全二叉树结构，可用数组实现</li>
<li>应用场景：TopK 问题（时间复杂度 O(nlogk)）</li>
</ul>
<hr>
<h3 id="典型算法"><a href="#典型算法" class="headerlink" title="典型算法"></a>典型算法</h3><p><strong>快速排序优化</strong></p>
<ol>
<li>三数取中法选择 pivot</li>
<li>小数组切换插入排序</li>
<li>三向切分（处理大量重复元素）</li>
</ol>
<p><strong>面试高频问题</strong></p>
<ul>
<li>如何判断链表有环？快慢指针 vs 哈希表</li>
<li>二叉树层序遍历的时空复杂度？</li>
<li>海量数据求 TopK 为什么用堆不用排序？</li>
</ul>
<h3 id="典型算法-1"><a href="#典型算法-1" class="headerlink" title="典型算法"></a>典型算法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">const</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> left = [];</span><br><span class="line">  <span class="keyword">const</span> right = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr[i] &lt; pivot ? left.<span class="title function_">push</span>(arr[i]) : right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left), pivot, ...<span class="title function_">quickSort</span>(right)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="前端核心"><a href="#前端核心" class="headerlink" title="前端核心"></a>前端核心</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><strong>实现机制</strong></p>
<ol>
<li>每个对象都有 <code>__proto__</code> 属性指向构造函数的 prototype</li>
<li>每个构造函数也是函数，其 <code>__proto__</code> 指向 Function.prototype</li>
<li>Function.prototype 的 <code>__proto__</code> 指向 Object.prototype</li>
<li>Object.prototype 的 <code>__proto__</code> 指向 null (原型链的终点即是 Object.prototype)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; eating&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p><strong>实现方式</strong></p>
<ol>
<li>组合继承（推荐）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组合继承（原型链+构造函数）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 第二次调用Animal</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>(); <span class="comment">// 第一次调用Animal</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Cat</span>; <span class="comment">// 修复构造函数指向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">colors</span>); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>寄生组合式继承（推荐-最理想的继承形式）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">child, parent</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建父类原型的副本</span></span><br><span class="line">  prototype.<span class="property">constructor</span> = child; <span class="comment">// 修复constructor指向</span></span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">// 赋值给子类原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 只调用一次父类构造函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键步骤：建立原型关系</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加子类方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">5</span>);</span><br><span class="line">child1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&quot;green&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">colors</span>); <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JavaScript-继承方式对比"><a href="#JavaScript-继承方式对比" class="headerlink" title="JavaScript 继承方式对比"></a>JavaScript 继承方式对比</h2><table>
<thead>
<tr>
<th>特性</th>
<th>组合继承</th>
<th>寄生组合式继承</th>
</tr>
</thead>
<tbody><tr>
<td><strong>实现方式</strong></td>
<td>构造函数继承+原型链继承</td>
<td>构造函数继承+原型拷贝</td>
</tr>
<tr>
<td><strong>父类调用次数</strong></td>
<td>2 次（构造函数和原型各 1 次）</td>
<td>1 次（仅构造函数）</td>
</tr>
<tr>
<td><strong>原型链纯度</strong></td>
<td>子类原型包含多余父类实例属性</td>
<td>纯净的原型链</td>
</tr>
<tr>
<td><strong>内存效率</strong></td>
<td>较低（重复属性）</td>
<td>较高</td>
</tr>
<tr>
<td><strong>代码复杂度</strong></td>
<td>简单直接</td>
<td>需要辅助函数</td>
</tr>
<tr>
<td><strong>ES6 class 底层</strong></td>
<td>不是</td>
<td>是</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>简单继承场景</td>
<td>需要高效继承的复杂场景</td>
</tr>
<tr>
<td><strong>方法复用</strong></td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td><strong>属性隔离</strong></td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td><strong>constructor 修正</strong></td>
<td>需要手动修正</td>
<td>需要手动修正</td>
</tr>
</tbody></table>
<p><strong>关键区别总结</strong>：</p>
<ol>
<li>寄生组合式继承避免了组合继承的原型属性冗余问题</li>
<li>寄生组合式继承是 ES6 class 语法糖的底层实现方式</li>
<li>组合继承更易理解但性能稍差，适合简单继承场景</li>
</ol>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><strong>核心特征</strong></p>
<ul>
<li>函数嵌套结构（函数内部定义函数）</li>
<li>内部函数引用了外部函数的变量</li>
<li>延长变量生命周期（内部函数在外部函数执行完毕后仍然可以被访问）</li>
</ul>
<p><strong>闭包的关键特征：</strong></p>
<ul>
<li>保持对词法作用域的引用</li>
<li>即使外部函数已经执行完毕，闭包仍然可以访问外部函数的变量</li>
<li>闭包会阻止垃圾回收机制回收被引用的变量</li>
</ul>
<p><strong>闭包的典型应用场景：</strong></p>
<ul>
<li>数据封装和私有变量</li>
<li>回调函数</li>
<li>函数柯里化</li>
<li>模块模式</li>
</ul>
<p><strong>内存泄漏案例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createHeavy</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bigData = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> bigData; <span class="comment">// 闭包持有bigData引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决方案：显式释放引用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bigData = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getData</span>: <span class="function">() =&gt;</span> bigData,</span><br><span class="line">    <span class="attr">clear</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      bigData.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p><strong>浏览器环境</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>), <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>));</span><br><span class="line"><span class="comment">// 输出顺序：1 -&gt; 3 -&gt; 2</span></span><br></pre></td></tr></table></figure>

<p><strong>Node.js 环境</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(__filename, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>), <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出顺序：2 -&gt; 1（在I/O阶段setImmediate优先）</span></span><br></pre></td></tr></table></figure>

<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><strong>类组件 vs 函数组件</strong></p>
<ul>
<li>挂载阶段：constructor → render → componentDidMount</li>
<li>更新阶段：shouldComponentUpdate → render → componentDidUpdate</li>
<li>卸载阶段：componentWillUnmount</li>
</ul>
<p><strong>Hooks 执行顺序</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// componentDidMount</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父组件 mounted&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父组件 unmount&quot;</span>); <span class="comment">// componentWillUnmount</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>); <span class="comment">// 状态初始化</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Hooks-使用"><a href="#Hooks-使用" class="headerlink" title="Hooks 使用"></a>Hooks 使用</h4><p><strong>最佳实践</strong></p>
<ol>
<li>用 useMemo 缓存昂贵计算</li>
<li>用 useCallback 避免子组件无效重渲染</li>
<li>自定义 Hook 封装通用逻辑</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义Hook实现防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useDebounce</span>(<span class="params">value, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [debouncedValue, setDebouncedValue] = <span class="title function_">useState</span>(value);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setDebouncedValue</span>(value);</span><br><span class="line">    &#125;, delay);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(handler);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [value, delay]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debouncedValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="虚拟-DOM-原理"><a href="#虚拟-DOM-原理" class="headerlink" title="虚拟 DOM 原理"></a>虚拟 DOM 原理</h4><p><strong>Diff 算法优化策略</strong></p>
<ol>
<li>同级比较（时间复杂度 O(n^3)→O(n)）</li>
<li>key 属性优化列表对比</li>
<li>双缓存技术避免白屏</li>
</ol>
<hr>
<hr>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ul>
<li>CAP 定理</li>
<li>RESTful 设计</li>
<li>缓存策略</li>
</ul>
<h3 id="典型系统"><a href="#典型系统" class="headerlink" title="典型系统"></a>典型系统</h3><ul>
<li>短链接系统</li>
<li>秒杀系统</li>
<li>即时通讯系统</li>
</ul>
<hr>
<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li>进程&#x2F;线程</li>
<li>内存管理</li>
<li>文件系统</li>
</ul>
<h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><ul>
<li>TCP&#x2F;IP 协议栈</li>
<li>HTTP&#x2F;2 特性</li>
<li>WebSocket 原理</li>
</ul>
<hr>
<p>持续更新中…</p>
]]></content>
      <categories>
        <category>目录</category>
      </categories>
  </entry>
  <entry>
    <title>浏览器多页面通信方案</title>
    <url>/2024/04/04/%E8%B7%A8%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="跨标签页通信：让浏览器标签页”说悄悄话”的-5-种方法"><a href="#跨标签页通信：让浏览器标签页”说悄悄话”的-5-种方法" class="headerlink" title="跨标签页通信：让浏览器标签页”说悄悄话”的 5 种方法"></a>跨标签页通信：让浏览器标签页”说悄悄话”的 5 种方法</h2><p><strong>场景想象</strong>：<br>你打开两个淘宝标签页，在 A 页面把商品加入购物车，B 页面却像没看见似的。这种尴尬就像你在微信聊天，对方明明在线却显示”未读”一样难受。这时候就需要让标签页学会”说悄悄话”！</p>
<h3 id="一、LocalStorage-传纸条法（最基础）"><a href="#一、LocalStorage-传纸条法（最基础）" class="headerlink" title="一、LocalStorage 传纸条法（最基础）"></a>一、LocalStorage 传纸条法（最基础）</h3><p><strong>原理</strong>：利用浏览器存储的”记事本”，一个页面写内容，其他页面监听变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面A发送消息</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;chatMsg&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">productId</span>: <span class="number">123</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面B接收消息</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;storage&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&quot;chatMsg&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">newValue</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到新消息:&quot;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>详情</th>
</tr>
</thead>
<tbody><tr>
<td>✅ 优点</td>
<td>简单直接</td>
<td>纯前端实现，无需后端支持；API 简单（<code>setItem</code>&#x2F;<code>getItem</code>）</td>
</tr>
<tr>
<td>✅ 优点</td>
<td>同源共享</td>
<td>同一域名下的所有页面&#x2F;标签页均可访问</td>
</tr>
<tr>
<td>✅ 优点</td>
<td>持久存储</td>
<td>数据不会随浏览器关闭而清除（需手动清理）</td>
</tr>
<tr>
<td>✅ 优点</td>
<td>存储容量</td>
<td>约 5MB（是 Cookie 约为 4kb 的 50 倍）</td>
</tr>
<tr>
<td>❌ 缺点</td>
<td>安全隐患</td>
<td>明文存储，易受 XSS 攻击；无法原生设置过期时间（需自行实现）</td>
</tr>
<tr>
<td>❌ 缺点</td>
<td>性能问题</td>
<td>同步操作可能阻塞主线程；频繁读写影响页面响应速度</td>
</tr>
<tr>
<td>❌ 缺点</td>
<td>数据类型限制</td>
<td>仅支持字符串存储（需手动<code>JSON.stringify</code>）</td>
</tr>
<tr>
<td>❌ 缺点</td>
<td>并发问题</td>
<td>多标签页同时写入可能导致数据竞争</td>
</tr>
</tbody></table>
<h3 id="二、BroadcastChannel-对讲机（最优雅）"><a href="#二、BroadcastChannel-对讲机（最优雅）" class="headerlink" title="二、BroadcastChannel 对讲机（最优雅）"></a>二、BroadcastChannel 对讲机（最优雅）</h3><p><strong>原理</strong>：像创建聊天室频道，加入频道的页面都能实时对话。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cross_page_channel表示(可以自定义任何字符串)</span></span><br><span class="line"><span class="comment">// 所有使用相同频道名称的页面会自动加入同一个通信频道</span></span><br><span class="line"><span class="comment">// 不同频道名称的页面之间不会互相干扰</span></span><br><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(<span class="string">&quot;cross_page_channel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发消息</span></span><br><span class="line">channel.<span class="title function_">postMessage</span>(&#123; <span class="attr">action</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">item</span>: <span class="string">&quot;手机&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收消息</span></span><br><span class="line">channel.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;频道消息:&quot;</span>, e.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>：</p>
<ul>
<li>✔️ 现代浏览器支持</li>
<li>✔️ API 简洁直观</li>
<li>❌ IE 不支持</li>
<li>❌ 需要同源</li>
</ul>
<h3 id="三、SharedWorker-接线员（最专业）"><a href="#三、SharedWorker-接线员（最专业）" class="headerlink" title="三、SharedWorker 接线员（最专业）"></a>三、SharedWorker 接线员（最专业）</h3><p><strong>原理</strong>：创建一个后台”接线员”，所有页面通过它中转消息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// worker.js</span></span><br><span class="line"><span class="keyword">const</span> ports = [];</span><br><span class="line">onconnect = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> port = e.<span class="property">ports</span>[<span class="number">0</span>];</span><br><span class="line">  ports.<span class="title function_">push</span>(port);</span><br><span class="line"></span><br><span class="line">  port.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    ports.<span class="title function_">forEach</span>(<span class="function">(<span class="params">p</span>) =&gt;</span> p.<span class="title function_">postMessage</span>(e.<span class="property">data</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面使用</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">SharedWorker</span>(<span class="string">&quot;worker.js&quot;</span>);</span><br><span class="line">worker.<span class="property">port</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;来自接线员:&quot;</span>, e.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line">worker.<span class="property">port</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;新订单！&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>：</p>
<ul>
<li>✔️ 支持跨域</li>
<li>✔️ 适合复杂场景</li>
<li>❌ 实现较复杂</li>
<li>❌ 需要处理连接状态</li>
</ul>
<h3 id="四、Window-open-父子对话（最直接）"><a href="#四、Window-open-父子对话（最直接）" class="headerlink" title="四、Window.open 父子对话（最直接）"></a>四、Window.open 父子对话（最直接）</h3><p><strong>原理</strong>：父子页面直接通过 window 对象喊话。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父页面打开子页面</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;child.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父页面向子页面喊话</span></span><br><span class="line">child.<span class="title function_">postMessage</span>(<span class="string">&quot;已支付成功&quot;</span>, <span class="string">&quot;https://同一域名&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子页面监听</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">origin</span> !== <span class="string">&quot;父页面域名&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;爸爸说:&quot;</span>, e.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>：</p>
<ul>
<li>✔️ 精确控制通信对象</li>
<li>✔️ 支持跨域</li>
<li>❌ 需要维护窗口引用</li>
<li>❌ 安全性要求高</li>
</ul>
<h3 id="五、Service-Worker-后台信使（最持久）"><a href="#五、Service-Worker-后台信使（最持久）" class="headerlink" title="五、Service Worker 后台信使（最持久）"></a>五、Service Worker 后台信使（最持久）</h3><p><strong>原理</strong>：利用后台线程做消息中转站。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册Service Worker</span></span><br><span class="line">navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&quot;sw.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面发送</span></span><br><span class="line">navigator.<span class="property">serviceWorker</span>.<span class="property">controller</span>.<span class="title function_">postMessage</span>(<span class="string">&quot;用户登录了&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service Worker接收</span></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 广播给所有页面</span></span><br><span class="line">  self.<span class="property">clients</span>.<span class="title function_">matchAll</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">clients</span>) =&gt;</span> &#123;</span><br><span class="line">    clients.<span class="title function_">forEach</span>(<span class="function">(<span class="params">client</span>) =&gt;</span> client.<span class="title function_">postMessage</span>(e.<span class="property">data</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong>：</p>
<ul>
<li>✔️ 支持离线通信</li>
<li>✔️ 可推送通知</li>
<li>❌ 需要 HTTPS</li>
<li>❌ 学习曲线较高</li>
</ul>
<h3 id="方法对比表"><a href="#方法对比表" class="headerlink" title="方法对比表"></a>方法对比表</h3><table>
<thead>
<tr>
<th>方法</th>
<th>适用场景</th>
<th>跨域支持</th>
<th>实时性</th>
<th>复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>LocalStorage</td>
<td>简单状态同步</td>
<td>❌</td>
<td>高</td>
<td>⭐</td>
</tr>
<tr>
<td>BroadcastChannel</td>
<td>同源多页通信</td>
<td>❌</td>
<td>高</td>
<td>⭐⭐</td>
</tr>
<tr>
<td>SharedWorker</td>
<td>复杂数据交互</td>
<td>✔️</td>
<td>高</td>
<td>⭐⭐⭐⭐</td>
</tr>
<tr>
<td>Window.open</td>
<td>父子页通信</td>
<td>✔️</td>
<td>高</td>
<td>⭐⭐⭐</td>
</tr>
<tr>
<td>Service Worker</td>
<td>离线&#x2F;后台场景</td>
<td>✔️</td>
<td>中</td>
<td>⭐⭐⭐⭐</td>
</tr>
</tbody></table>
<h3 id="安全小贴士"><a href="#安全小贴士" class="headerlink" title="安全小贴士"></a>安全小贴士</h3><ul>
<li>使用 <code>postMessage</code> 时务必验证 <code>origin</code></li>
<li>敏感操作建议配合服务端验证</li>
<li>跨域通信设置白名单</li>
</ul>
<h3 id="选型建议"><a href="#选型建议" class="headerlink" title="选型建议"></a>选型建议</h3><ul>
<li>购物车同步 → <code>BroadcastChannel</code></li>
<li>多窗口协作编辑器 → <code>SharedWorker</code></li>
<li>第三方组件通信 → <code>Window.postMessage</code></li>
<li>离线消息通知 → <code>Service Worker</code></li>
</ul>
<p>当浏览器标签页学会”窃窃私语”，用户体验就像交响乐团有了指挥——每个页面都在正确的时间奏响正确的音符。选择合适的方法，让你的应用跳出”单页思维”，开启真正的多线程协作体验吧！</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>基础知识</tag>
        <tag>多页面通信</tag>
      </tags>
  </entry>
</search>
